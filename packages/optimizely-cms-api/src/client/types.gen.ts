// This file is auto-generated by @hey-api/openapi-ts

/**
 * Describes a property that can contain a reference to binary data.
 */
export type BinaryProperty = ContentTypeProperty & {
    type: 'BinaryProperty';
} & {
    imageDescriptor?: ImageDescriptor;
};

/**
 * Describes a property that can contain a boolean value.
 */
export type BooleanProperty = ContentTypeProperty & {
    type: 'BooleanProperty';
} & {
    [key: string]: never;
};

/**
 * Changesets are used to group work on several content items together.
 */
export type Changeset = {
    /**
     * The unique key of this Changeset.
     */
    key: string;
    /**
     * The source of this Changeset
     */
    source?: string;
    /**
     * The name of this Changeset.
     */
    displayName: string;
    /**
     * A timestamp indicating when this changeset was first created.
     */
    readonly created?: Date;
    /**
     * The username of the user that created this changeset.
     */
    readonly createdBy?: string;
    lastModified?: Date;
};

/**
 * Items in an changeset that contains a link to the specific content version.
 */
export type ChangesetItem = {
    reference: ContentReference;
    /**
     * Gets/sets the changeset item category.
     */
    category?: string;
};

export type ChangesetItemPage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<ChangesetItem>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

export type ChangesetPage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<Changeset>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

/**
 * Describes a property list item that can contain a component instance of a specific type.
 */
export type ComponentListItem = ListPropertyItem & {
    type: 'ComponentListItem';
} & {
    /**
     * The key of the ContentType that this ComponentListItem can contain.
     */
    contentType: string;
};

/**
 * Describes a property that can contain a component instance of a specific type.
 */
export type ComponentProperty = ContentTypeProperty & {
    type: 'ComponentProperty';
} & {
    /**
     * The key of the ContentType that this ComponentProperty can contain.
     */
    contentType: string;
};

/**
 * Represent a Composition behavior for a ContentType.
 */
export type CompositionBehavior = 'sectionEnabled' | 'elementEnabled';

/**
 * Represent a Composition behavior for a ContentType.
 */
export const CompositionBehavior = {
    SECTION_ENABLED: 'sectionEnabled',
    ELEMENT_ENABLED: 'elementEnabled'
} as const;

/**
 * Represent the base type of a ContentType.
 */
export type ContentBaseType = 'page' | 'component' | 'media' | 'image' | 'video' | 'folder' | 'experience' | 'section' | 'element';

/**
 * Represent the base type of a ContentType.
 */
export const ContentBaseType = {
    PAGE: 'page',
    COMPONENT: 'component',
    MEDIA: 'media',
    IMAGE: 'image',
    VIDEO: 'video',
    FOLDER: 'folder',
    EXPERIENCE: 'experience',
    SECTION: 'section',
    ELEMENT: 'element'
} as const;

/**
 * Represents a content component.
 */
export type ContentComponent = {
    /**
     * The name of the content component. If Reference is set, the name is automatically set to the name of the referenced content.
     */
    name?: string;
    /**
     * An optional display option for the content component.
     */
    displayOption?: string;
    /**
     * An optional group for the personalizable component.
     */
    segmentationGroup?: string;
    /**
     * Specifies the settings for the content component.
     */
    segments?: Array<string>;
    reference?: string;
    /**
     * The key of the content type that this is an embedded instance of.
     */
    contentType?: string;
    /**
     * Dictionary with all custom properties as specified by associated ContentType
     */
    content?: unknown;
};

/**
 * Represents a version of a content item.
 */
export type ContentItem = {
    /**
     * Properties as they are defined by corresponding component or content type.
     */
    properties?: {};
    /**
     * The key that identifies this content item.
     */
    readonly key: string;
    /**
     * The locale of this content instance.
     */
    readonly locale?: string;
    /**
     * The version identifier of this content instance.
     */
    readonly version?: string;
    /**
     * The content type of this content item.
     */
    readonly contentType?: string;
    /**
     * The display name of this content item.
     */
    displayName: string;
    /**
     * Indicates a time when this content was published or should be published.
     */
    published?: Date | null;
    /**
     * Indicates a time when this content expired or should expire.
     */
    expired?: Date | null;
    status?: VersionStatus;
    /**
     * Indicates a time when this content version should transition to published status. Must only be assigned when Status is set to Scheduled.
     */
    delayPublishUntil?: Date | null;
    /**
     * The key that identifies the container content that this content item belongs to.
     */
    container?: string | null;
    /**
     * The key that identifies the owner of this content. Content that is own by another content is also known as an asset.
     */
    owner?: string | null;
    /**
     * A string that represents the segment that should be used when routing or generate routes to the current content instance.
     */
    routeSegment?: string | null;
    lastModified?: Date;
    /**
     * The username of the user that made the latest modification to this content instance.
     */
    readonly lastModifiedBy?: string;
};

/**
 * The response object for Page`1 when used ContentType are included.
 */
export type ContentItemListWithContentTypes = {
    /**
     * The content types that are used by the content items in the response.
     */
    readonly contentTypes?: Array<ContentType>;
    /**
     * The content items in this paged collection.
     */
    readonly items?: Array<ContentItem>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

export type ContentItemPage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<ContentItem>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

/**
 * The response object for ContentItem when used ContentType are included.
 */
export type ContentItemWithContentTypes = {
    /**
     * The content types that are used by the content item in the response.
     */
    readonly contentTypes?: Array<ContentType>;
    item?: ContentItem;
};

/**
 * Describes a property list item that can hold a content item.
 */
export type ContentListItem = ListPropertyItem & {
    type: 'ContentListItem';
} & {
    /**
     * Specifies which content types and base types these property items are allowed to contain.
     */
    allowedTypes?: Array<string>;
    /**
     * Specifies which content types and base types these property items cannot contain.
     */
    restrictedTypes?: Array<string>;
};

/**
 * Describes information about a locale instance of a content item.
 */
export type ContentLocaleInfo = {
    /**
     * The display name of the content.
     */
    readonly displayName?: string;
    /**
     * The date and time when the first locale version for the content was created.
     */
    readonly created?: Date;
    /**
     * The username of the user that created this locale version of content.
     */
    readonly createdBy?: string;
    status?: LocaleStatus;
};

/**
 * Represents metadata about a content item.
 */
export type ContentMetadata = {
    /**
     * The key that identifies this content.
     */
    key?: string;
    /**
     * The content type of this content.
     */
    contentType?: string;
    /**
     * Set of locales that this content has been created for.
     */
    readonly locales?: {
        [key: string]: ContentLocaleInfo;
    };
    /**
     * The key that identifies the container content that this content belongs to.
     */
    container?: string | null;
    /**
     * Indicates if the content contains any content items.
     */
    readonly hasItems?: boolean;
    /**
     * The key that identifies the owner of this content. Content that is own by another content is also known as an asset.
     */
    owner?: string | null;
    /**
     * A timestamp, which if provided, indicates when this content was deleted.
     */
    readonly deleted?: Date | null;
    /**
     * The username of the user that deleted this content.
     */
    readonly deletedBy?: string | null;
};

export type ContentMetadataPage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<ContentMetadata>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

/**
 * Describes a property that can contain a content item.
 */
export type ContentProperty = ContentTypeProperty & {
    type: 'ContentProperty';
} & {
    /**
     * Specifies which content types and base types this property is allowed to contain.
     */
    allowedTypes?: Array<string>;
    /**
     * Specifies which content types and base types this property cannot contain.
     */
    restrictedTypes?: Array<string>;
};

/**
 * A reference to a specific content instance.
 */
export type ContentReference = {
    /**
     * The content key that identifies the content.
     */
    readonly key?: string;
    /**
     * The name of the content locale
     */
    readonly locale?: string;
    /**
     * The identifier of a specific version of the content.
     */
    readonly version?: string;
};

/**
 * Describes a property list item that can hold a reference to a content item.
 */
export type ContentReferenceListItem = ListPropertyItem & {
    type: 'ContentReferenceListItem';
} & {
    /**
     * Specifies which content types and base types these list items are allowed to reference.
     */
    allowedTypes?: Array<string>;
    /**
     * Specifies which content types and base types these list items cannot contain.
     */
    restrictedTypes?: Array<string>;
};

/**
 * Describes a property that can contain a reference to a content item.
 */
export type ContentReferenceProperty = ContentTypeProperty & {
    type: 'ContentReferenceProperty';
} & {
    /**
     * Specifies which content types and base types this property is allowed to reference.
     */
    allowedTypes?: Array<string>;
    /**
     * Specifies which content types and base types this property is restricted from referencing.
     */
    restrictedTypes?: Array<string>;
};

/**
 * A writable implementation of an ContentType.
 */
export type ContentType = {
    /**
     * The key that identifies this ContentType.
     */
    key: string;
    /**
     * The display name of this ContentType.
     */
    displayName?: string;
    /**
     * A description of this ContentType.
     */
    description?: string;
    baseType?: ContentBaseType;
    /**
     * A string that is used to indicate the source of this ContentType.
     */
    readonly source?: string;
    /**
     * An value that is used to when sorting ContentType instances.
     */
    sortOrder?: number;
    /**
     * Provides a set of features that content based on this ContentType supports.
     * This value is assigned based on the BaseType and cannot be modified.
     */
    features?: Array<ContentTypeFeature>;
    /**
     * Specifies how this ContentType can be used.
     */
    usage?: Array<ContentTypeUsage>;
    /**
     * Provides a set of content types that can be created in container of this type
     */
    mayContainTypes?: Array<string>;
    /**
     * Provides a set of media file extensions that this content type can handle.
     */
    mediaFileExtensions?: Array<string>;
    /**
     * Provides a set of composition behaviors specifying how this content type can be used within compositions.
     */
    compositionBehaviors?: Array<CompositionBehavior>;
    /**
     * A timestamp indicating when this ContentType was first created.
     */
    readonly created?: Date;
    /**
     * Indicates the last time this content type was modified.
     */
    readonly lastModified?: Date;
    /**
     * The username of the user that made the latest modification to this ContentType.
     */
    readonly lastModifiedBy?: string;
    /**
     * Dictionary with all custom properties of this ContentType.
     */
    properties?: {
        [key: string]: (({
            type?: 'BinaryProperty';
        } & BinaryProperty) | ({
            type?: 'BooleanProperty';
        } & BooleanProperty) | ({
            type?: 'ComponentProperty';
        } & ComponentProperty) | ({
            type?: 'ContentProperty';
        } & ContentProperty) | ({
            type?: 'ContentReferenceProperty';
        } & ContentReferenceProperty) | ({
            type?: 'DateTimeProperty';
        } & DateTimeProperty) | ({
            type?: 'FloatProperty';
        } & FloatProperty) | ({
            type?: 'IntegerProperty';
        } & IntegerProperty) | ({
            type?: 'StringProperty';
        } & StringProperty) | ({
            type?: 'UrlProperty';
        } & UrlProperty) | ({
            type?: 'JsonStringProperty';
        } & JsonStringProperty) | ({
            type?: 'ListProperty';
        } & ListProperty)) & {
            /**
             * Settings for the editor.
             */
            editorSettings?: {
                [key: string]: {
                    [key: string]: unknown;
                };
            } | null;
        };
    };
};

/**
 * Represent different features that a content type can have.
 */
export type ContentTypeFeature = 'localization' | 'versioning' | 'publishPeriod' | 'routing' | 'binary';

/**
 * Represent different features that a content type can have.
 */
export const ContentTypeFeature = {
    LOCALIZATION: 'localization',
    VERSIONING: 'versioning',
    PUBLISH_PERIOD: 'publishPeriod',
    ROUTING: 'routing',
    BINARY: 'binary'
} as const;

export type ContentTypePage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<ContentType>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

/**
 * Describes a property of a ContentType in the CMS.
 */
export type ContentTypeProperty = {
    type: PropertyDataType;
    /**
     * The key of the PropertyFormat that this ContentTypeProperty is an instance of.
     */
    format?: string | null;
    /**
     * The display name of this ContentTypeProperty.
     */
    displayName?: string;
    /**
     * A description of this ContentTypeProperty.
     */
    description?: string;
    /**
     * Indicates if a property instance of this type should be localized for each locale
     * or if values are shared between all locales.
     */
    localized?: boolean;
    /**
     * Indicates if a property instance of this type must always be assigned a value.
     */
    required?: boolean;
    /**
     * A reference to the PropertyGroup that this ContentTypeProperty is part of.
     * If this value is empty, a group may be assigned by the system.
     */
    group?: string;
    /**
     * An value that is used to when sorting ContentTypeProperty instances.
     */
    sortOrder?: number;
    indexingType?: IndexingType;
    /**
     * Editor used for managing this property.
     */
    editor?: string | null;
    /**
     * Settings for the editor.
     */
    editorSettings?: {
        [key: string]: {
            [key: string]: unknown;
        };
    } | null;
};

/**
 * Represent the usage types for a ContentType.
 */
export type ContentTypeUsage = 'property' | 'instance';

/**
 * Represent the usage types for a ContentType.
 */
export const ContentTypeUsage = {
    PROPERTY: 'property',
    INSTANCE: 'instance'
} as const;

/**
 * Options for copying content.
 */
export type CopyContentOptions = {
    /**
     * Indicates if deleted content could be used as source.
     */
    allowDeleted?: boolean;
    /**
     * Optional key of the container where the copied content should be placed.
     */
    container?: string | null;
    /**
     * Optional key of the owner where the copied content should be placed.
     */
    owner?: string | null;
    /**
     * Indicates if published versions of the content should keep their published status rather than being created as a draft version at the destination.
     */
    keepPublishedStatus?: boolean;
};

/**
 * Describes a property list item that can contain a timestamp.
 */
export type DateTimeListItem = ListPropertyItem & {
    type: 'DateTimeListItem';
} & {
    /**
     * The earliest timestamp that list items of this type should be able to contain.
     */
    minimum?: Date | null;
    /**
     * The latest timestamp that list items of this type should be able to contain.
     */
    maximum?: Date | null;
};

/**
 * Describes a property that can contain a timestamp.
 */
export type DateTimeProperty = ContentTypeProperty & {
    type: 'DateTimeProperty';
} & {
    /**
     * The earliest timestamp that properties of this type should be able to contain.
     */
    minimum?: Date | null;
    /**
     * The latest timestamp that properties of this type should be able to contain.
     */
    maximum?: Date | null;
};

/**
 * Describes a setting for a display template.
 */
export type DisplaySetting = {
    /**
     * The display name of this display setting.
     */
    displayName: string;
    /**
     * The suggested editor for this display setting.
     */
    editor?: string;
    /**
     * The sort order of this display setting within the template.
     */
    sortOrder?: number;
    /**
     * The available choices for this display setting.
     */
    choices?: {
        [key: string]: DisplaySettingChoice;
    };
};

/**
 * Describes a setting for a display template.
 */
export type DisplaySettingChoice = {
    /**
     * The display name of this display setting choice.
     */
    displayName: string;
    /**
     * The sort order of this choice within the setting.
     */
    sortOrder?: number;
};

/**
 * Describes a display template that can be assigned to content.
 */
export type DisplayTemplate = {
    /**
     * The key that identifies this display template.
     */
    readonly key: string;
    /**
     * The display name of this display template.
     */
    displayName: string;
    /**
     * The optional node type this display template is valid for.
     */
    nodeType?: string | null;
    baseType?: ContentBaseType;
    /**
     * The optional key of the content type this display template is valid for.
     */
    contentType?: string | null;
    /**
     * If this is the default display template for the associated base type,
     * node type or content type.
     */
    isDefault?: boolean;
    /**
     * A timestamp indicating when this display template was first created.
     */
    readonly created?: Date;
    /**
     * The username of the user that created this display template.
     */
    readonly createdBy?: string;
    /**
     * A timestamp indicating when this display template was last modified.
     */
    readonly lastModified?: Date;
    /**
     * The username of the user that last modified this display template.
     */
    readonly lastModifiedBy?: string;
    /**
     * The available settings for this display template.
     */
    settings?: {
        [key: string]: DisplaySetting;
    };
};

export type DisplayTemplatePage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<DisplayTemplate>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

/**
 * Enumeration settings for a property or format.
 */
export type DoubleEnumerationSettings = {
    /**
     * Enumeration values for this property or format.
     */
    values?: Array<DoubleEnumerationValue>;
};

/**
 * Describes an enumeration value.
 */
export type DoubleEnumerationValue = {
    /**
     * The display name of the value.
     */
    displayName?: string;
    /**
     * The underlying enumeration value.
     */
    value?: number;
};

/**
 * Describes a property list item that can contain a float number.
 */
export type FloatListItem = ListPropertyItem & {
    type: 'FloatListItem';
} & {
    /**
     * The minimum value that list items of this type should be able to contain.
     */
    minimum?: number | null;
    /**
     * The maximum value that list items of this type should be able to contain.
     */
    maximum?: number | null;
    enum?: DoubleEnumerationSettings;
};

/**
 * Describes a property that can contain a float number.
 */
export type FloatProperty = ContentTypeProperty & {
    type: 'FloatProperty';
} & {
    /**
     * The minimum value that properties of this type should be able to contain.
     */
    minimum?: number | null;
    /**
     * The maximum value that properties of this type should be able to contain.
     */
    maximum?: number | null;
    enum?: DoubleEnumerationSettings;
};

/**
 * Instruction for generating an alternative image from the main binary of an image content item.
 */
export type ImageDescriptor = {
    /**
     * The image width in pixels.
     */
    width?: number;
    /**
     * The image height in pixels.
     */
    height?: number;
    /**
     * Indicates if the image should be pregenerated when a new image is uploaded rather than when first requested.
     */
    pregenerated?: boolean;
};

/**
 * Represents the indexing type of a content type property.
 */
export type IndexingType = 'disabled' | 'queryable' | 'searchable';

/**
 * Represents the indexing type of a content type property.
 */
export const IndexingType = {
    DISABLED: 'disabled',
    QUERYABLE: 'queryable',
    SEARCHABLE: 'searchable'
} as const;

/**
 * Enumeration settings for a property or format.
 */
export type Int32EnumerationSettings = {
    /**
     * Enumeration values for this property or format.
     */
    values?: Array<Int32EnumerationValue>;
};

/**
 * Describes an enumeration value.
 */
export type Int32EnumerationValue = {
    /**
     * The display name of the value.
     */
    displayName?: string;
    /**
     * The underlying enumeration value.
     */
    value?: number;
};

/**
 * Describes a property list item that can contain integers.
 */
export type IntegerListItem = ListPropertyItem & {
    type: 'IntegerListItem';
} & {
    /**
     * The minimum value that list items of this type should be able to contain.
     */
    minimum?: number | null;
    /**
     * The maximum value that list items of this type should be able to contain.
     */
    maximum?: number | null;
    enum?: Int32EnumerationSettings;
};

/**
 * Describes a property that can contain an integer.
 */
export type IntegerProperty = ContentTypeProperty & {
    type: 'IntegerProperty';
} & {
    /**
     * The minimum value that properties of this type should be able to contain.
     */
    minimum?: number | null;
    /**
     * The maximum value that properties of this type should be able to contain.
     */
    maximum?: number | null;
    enum?: Int32EnumerationSettings;
};

/**
 * Describes a property that can contain a JSON value in the form of a string.
 */
export type JsonStringProperty = ContentTypeProperty & {
    type: 'JsonStringProperty';
} & {
    [key: string]: never;
};

/**
 * A property in the CMS that may hold a list of items.
 */
export type ListProperty = ContentTypeProperty & {
    type: 'ListProperty';
} & {
    /**
     * Specifies the minimum number of items in this array property.
     */
    minItems?: number | null;
    /**
     * Specifies the maximum number of items in this array property.
     */
    maxItems?: number | null;
    /**
     * Describes the list item of a ListProperty in the CMS.
     */
    items: ({
        type?: 'ComponentListItem';
    } & ComponentListItem) | ({
        type?: 'ContentListItem';
    } & ContentListItem) | ({
        type?: 'ContentReferenceListItem';
    } & ContentReferenceListItem) | ({
        type?: 'DateTimeListItem';
    } & DateTimeListItem) | ({
        type?: 'FloatListItem';
    } & FloatListItem) | ({
        type?: 'IntegerListItem';
    } & IntegerListItem) | ({
        type?: 'StringListItem';
    } & StringListItem) | ({
        type?: 'UrlListItem';
    } & UrlListItem);
};

/**
 * Describes the list item of a ListProperty in the CMS.
 */
export type ListPropertyItem = {
    type: PropertyDataType;
    /**
     * The key of the PropertyFormat that this property item is an instance of.
     */
    format?: string | null;
};

/**
 * Represent the different status values of a content locale.
 */
export type LocaleStatus = 'draft' | 'published';

/**
 * Represent the different status values of a content locale.
 */
export const LocaleStatus = {
    DRAFT: 'draft',
    PUBLISHED: 'published'
} as const;

/**
 * Represents an OAuth JSON Web Token (JWT) and
 * its expiry in seconds.
 */
export type OauthToken = {
    /**
     * Gets or sets the access token.
     */
    accessToken?: string | null;
    /**
     * Gets or sets the expiry time in seconds.
     */
    expiresIn?: number;
    /**
     * Gets or sets the token type.
     */
    tokenType?: string;
};

/**
 * Represents an OAuth error.
 */
export type OauthTokenError = {
    /**
     * Gets or sets the error.
     */
    error?: string | null;
    /**
     * Gets or sets the error description.
     */
    errorDescription?: string | null;
};

/**
 * Represents an OAuth token request.
 */
export type OauthTokenRequest = {
    /**
     * Gets or sets the grant type.
     */
    grantType?: string | null;
    /**
     * Gets or sets the client id.
     */
    clientId?: string | null;
    /**
     * Gets or sets the client secret.
     */
    clientSecret?: string | null;
    /**
     * Get or sets the subject to act as.
     */
    actAs?: string | null;
};

export type ProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    readonly code?: string | null;
    readonly errors?: {
        [key: string]: Array<string>;
    } | null;
    [key: string]: unknown | (string | null) | (string | null) | (number | null) | (string | null) | (string | null) | (string | null) | ({
        [key: string]: Array<string>;
    } | null) | undefined;
};

/**
 * Represent the basic type that a PropertyFormat
 * is using for data storage and data transport.
 */
export type PropertyDataType = 'string' | 'url' | 'boolean' | 'integer' | 'float' | 'dateTime' | 'contentReference' | 'content' | 'binary' | 'json' | 'array' | 'component';

/**
 * Represent the basic type that a PropertyFormat
 * is using for data storage and data transport.
 */
export const PropertyDataType = {
    STRING: 'string',
    URL: 'url',
    BOOLEAN: 'boolean',
    INTEGER: 'integer',
    FLOAT: 'float',
    DATE_TIME: 'dateTime',
    CONTENT_REFERENCE: 'contentReference',
    CONTENT: 'content',
    BINARY: 'binary',
    JSON: 'json',
    ARRAY: 'array',
    COMPONENT: 'component'
} as const;

/**
 * Represent the definition of semantic property formats for content items.
 */
export type PropertyFormat = {
    /**
     * The key that identifies this PropertyFormat.
     */
    key?: string;
    dataType?: PropertyDataType;
    itemType?: PropertyDataType;
    /**
     * The name and identifier of this PropertyFormat.
     */
    displayName?: string;
    /**
     * Editor used for managing properties with this format.
     */
    editor?: string | null;
    /**
     * Indicates if this property format has been deleted.
     */
    deleted?: boolean;
    /**
     * Settings for the editor.
     */
    editorSettings?: {
        [key: string]: {
            [key: string]: unknown;
        };
    } | null;
    /**
     * Enumerations for the format.
     */
    enum?: {
        values?: Array<{
            value?: string | number | number;
            displayName?: string;
        }>;
    } | null;
};

export type PropertyFormatPage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<PropertyFormat>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

/**
 * Describes a property group of a ContentType in the CMS.
 */
export type PropertyGroup = {
    /**
     * The key that identifies this PropertyGroup.
     */
    readonly key: string;
    /**
     * The display name of this PropertyGroup.
     */
    displayName?: string;
    /**
     * A string that is used to indicate the source of this PropertyGroup.
     */
    readonly source?: string;
    /**
     * An value that is used to when sorting PropertyGroup instances.
     */
    sortOrder?: number;
};

export type PropertyGroupPage = {
    /**
     * The items in this paged collection.
     */
    readonly items?: Array<PropertyGroup>;
    /**
     * The zero-based index of the current page.
     */
    readonly pageIndex?: number;
    /**
     * The number of item in each page. Not necessarily the same as the number of items in this page.
     */
    readonly pageSize?: number;
    /**
     * The estimated total number of items in the collection. May be omitted if the total item count is unknown.
     */
    readonly totalItemCount?: number;
};

/**
 * Enumeration settings for a property or format.
 */
export type StringEnumerationSettings = {
    /**
     * Enumeration values for this property or format.
     */
    values?: Array<StringEnumerationValue>;
};

/**
 * Describes an enumeration value.
 */
export type StringEnumerationValue = {
    /**
     * The display name of the value.
     */
    displayName?: string;
    /**
     * The underlying enumeration value.
     */
    value?: string;
};

/**
 * Describes a property list item that can contain a string.
 */
export type StringListItem = ListPropertyItem & {
    type: 'StringListItem';
} & {
    /**
     * The minimum string length that list items of this type should be able to contain.
     */
    minLength?: number | null;
    /**
     * The maximum string length that list items of this type should be able to contain.
     */
    maxLength?: number | null;
    /**
     * Regular expression pattern that limits what strings that list items of this type should be able to contain.
     */
    pattern?: string | null;
    enum?: StringEnumerationSettings;
};

/**
 * Describes a property that can contain strings.
 */
export type StringProperty = ContentTypeProperty & {
    type: 'StringProperty';
} & {
    /**
     * The minimum string length that properties of this type should be able to contain.
     */
    minLength?: number | null;
    /**
     * The maximum string length that properties of this type should be able to contain.
     */
    maxLength?: number | null;
    /**
     * Regular expression pattern that limits what strings that properties of this type should be able to contain.
     */
    pattern?: string | null;
    enum?: StringEnumerationSettings;
};

/**
 * Describes a property list item that can contain a URL.
 */
export type UrlListItem = ListPropertyItem & {
    type: 'UrlListItem';
} & {
    [key: string]: never;
};

/**
 * Describes a property that can contain URLs.
 */
export type UrlProperty = ContentTypeProperty & {
    type: 'UrlProperty';
} & {
    [key: string]: never;
};

/**
 * Represent the different status values of a content version.
 */
export type VersionStatus = 'draft' | 'ready' | 'published' | 'previous' | 'scheduled' | 'rejected' | 'inReview';

/**
 * Represent the different status values of a content version.
 */
export const VersionStatus = {
    DRAFT: 'draft',
    READY: 'ready',
    PUBLISHED: 'published',
    PREVIOUS: 'previous',
    SCHEDULED: 'scheduled',
    REJECTED: 'rejected',
    IN_REVIEW: 'inReview'
} as const;

export type ChangesetsList_Data = {
    body?: never;
    path?: never;
    query?: {
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/changesets';
};

export type ChangesetsList_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsList_Error = ChangesetsList_Errors[keyof ChangesetsList_Errors];

export type ChangesetsList_Responses = {
    /**
     * OK
     */
    200: ChangesetPage;
};

export type ChangesetsList_Response = ChangesetsList_Responses[keyof ChangesetsList_Responses];

export type ChangesetsCreate_Data = {
    /**
     * The changeset that should be created.
     */
    body: Changeset;
    path?: never;
    query?: never;
    url: '/changesets';
};

export type ChangesetsCreate_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsCreate_Error = ChangesetsCreate_Errors[keyof ChangesetsCreate_Errors];

export type ChangesetsCreate_Responses = {
    /**
     * OK
     */
    200: Changeset;
};

export type ChangesetsCreate_Response = ChangesetsCreate_Responses[keyof ChangesetsCreate_Responses];

export type ChangesetsDelete_Data = {
    body?: never;
    path: {
        /**
         * The key of the changeset to delete.
         */
        key: string;
    };
    query?: never;
    url: '/changesets/{key}';
};

export type ChangesetsDelete_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsDelete_Error = ChangesetsDelete_Errors[keyof ChangesetsDelete_Errors];

export type ChangesetsDelete_Responses = {
    /**
     * OK
     */
    200: Changeset;
};

export type ChangesetsDelete_Response = ChangesetsDelete_Responses[keyof ChangesetsDelete_Responses];

export type ChangesetsGet_Data = {
    body?: never;
    path: {
        /**
         * The key of the changeset to retrieve.
         */
        key: string;
    };
    query?: never;
    url: '/changesets/{key}';
};

export type ChangesetsGet_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsGet_Error = ChangesetsGet_Errors[keyof ChangesetsGet_Errors];

export type ChangesetsGet_Responses = {
    /**
     * OK
     */
    200: Changeset;
};

export type ChangesetsGet_Response = ChangesetsGet_Responses[keyof ChangesetsGet_Responses];

export type ChangesetsPut_Data = {
    /**
     * The values of the created or replaced changeset.
     */
    body: Changeset;
    path: {
        /**
         * The key of the changeset to update or create.
         */
        key: string;
    };
    query?: never;
    url: '/changesets/{key}';
};

export type ChangesetsPut_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsPut_Error = ChangesetsPut_Errors[keyof ChangesetsPut_Errors];

export type ChangesetsPut_Responses = {
    /**
     * OK
     */
    200: Changeset;
};

export type ChangesetsPut_Response = ChangesetsPut_Responses[keyof ChangesetsPut_Responses];

export type ChangesetsDeleteItem_Data = {
    body?: never;
    path: {
        /**
         * The changeset key
         */
        changeset: string;
        /**
         * The content key
         */
        key: string;
        /**
         * The content version
         */
        version: string;
    };
    query?: never;
    url: '/changesets/{changeset}/items/{key}/versions/{version}';
};

export type ChangesetsDeleteItem_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsDeleteItem_Error = ChangesetsDeleteItem_Errors[keyof ChangesetsDeleteItem_Errors];

export type ChangesetsDeleteItem_Responses = {
    /**
     * OK
     */
    200: ChangesetItem;
};

export type ChangesetsDeleteItem_Response = ChangesetsDeleteItem_Responses[keyof ChangesetsDeleteItem_Responses];

export type ChangesetsGetItem_Data = {
    body?: never;
    path: {
        /**
         * The changeset key
         */
        changeset: string;
        /**
         * The content key
         */
        key: string;
        /**
         * The content version
         */
        version: string;
    };
    query?: never;
    url: '/changesets/{changeset}/items/{key}/versions/{version}';
};

export type ChangesetsGetItem_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsGetItem_Error = ChangesetsGetItem_Errors[keyof ChangesetsGetItem_Errors];

export type ChangesetsGetItem_Responses = {
    /**
     * OK
     */
    200: ChangesetItem;
};

export type ChangesetsGetItem_Response = ChangesetsGetItem_Responses[keyof ChangesetsGetItem_Responses];

export type ChangesetsListItems_Data = {
    body?: never;
    path: {
        /**
         * The changeset key
         */
        changeset: string;
    };
    query?: {
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/changesets/{changeset}/items';
};

export type ChangesetsListItems_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsListItems_Error = ChangesetsListItems_Errors[keyof ChangesetsListItems_Errors];

export type ChangesetsListItems_Responses = {
    /**
     * OK
     */
    200: ChangesetItemPage;
};

export type ChangesetsListItems_Response = ChangesetsListItems_Responses[keyof ChangesetsListItems_Responses];

export type ChangesetsCreateItem_Data = {
    /**
     * The changeset item
     */
    body: ChangesetItem;
    path: {
        /**
         * The changeset key
         */
        changeset: string;
    };
    query?: never;
    url: '/changesets/{changeset}/items';
};

export type ChangesetsCreateItem_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsCreateItem_Error = ChangesetsCreateItem_Errors[keyof ChangesetsCreateItem_Errors];

export type ChangesetsCreateItem_Responses = {
    /**
     * OK
     */
    200: ChangesetItem;
};

export type ChangesetsCreateItem_Response = ChangesetsCreateItem_Responses[keyof ChangesetsCreateItem_Responses];

export type ChangesetsUpdateItem_Data = {
    /**
     * The changeset item
     */
    body: ChangesetItem;
    path: {
        /**
         * The changeset key
         */
        changeset: string;
        /**
         * The content key
         */
        contentKey: string;
        /**
         * The content version
         */
        contentVersion: string;
    };
    query?: {
        /**
         * Indicates if a new changeset item should be created if it does not exist
         */
        allowCreate?: boolean;
    };
    url: '/changesets/{changeset}/items/{contentKey}/versions/{contentVersion}';
};

export type ChangesetsUpdateItem_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ChangesetsUpdateItem_Error = ChangesetsUpdateItem_Errors[keyof ChangesetsUpdateItem_Errors];

export type ChangesetsUpdateItem_Responses = {
    /**
     * OK
     */
    200: ChangesetItem;
};

export type ChangesetsUpdateItem_Response = ChangesetsUpdateItem_Responses[keyof ChangesetsUpdateItem_Responses];

export type ContentCreate_Data = {
    /**
     * The content item that should be created.
     */
    body: ContentItem;
    path?: never;
    query?: {
        /**
         * Indicates that the content validation should be ignored.
         */
        skipValidation?: boolean;
    };
    url: '/content';
};

export type ContentCreate_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentCreate_Error = ContentCreate_Errors[keyof ContentCreate_Errors];

export type ContentCreate_Responses = {
    /**
     * Created
     */
    201: ContentItemWithContentTypes;
};

export type ContentCreate_Response = ContentCreate_Responses[keyof ContentCreate_Responses];

export type ContentDelete_Data = {
    body?: never;
    path: {
        /**
         * The key of the content item to delete.
         */
        key: string;
    };
    query?: {
        /**
         * Indicates that the content item should be permanently deleted immediately or if it should be soft deleted first.
         */
        permanent?: boolean;
    };
    url: '/content/{key}';
};

export type ContentDelete_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentDelete_Error = ContentDelete_Errors[keyof ContentDelete_Errors];

export type ContentDelete_Responses = {
    /**
     * OK
     */
    200: ContentMetadata;
};

export type ContentDelete_Response = ContentDelete_Responses[keyof ContentDelete_Responses];

export type ContentGetMetadata_Data = {
    body?: never;
    path: {
        /**
         * The key of the content to retrieve metadata for.
         */
        key: string;
    };
    query?: {
        /**
         * Indicates that metadata for a deleted content may be returned.
         */
        allowDeleted?: boolean;
    };
    url: '/content/{key}';
};

export type ContentGetMetadata_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentGetMetadata_Error = ContentGetMetadata_Errors[keyof ContentGetMetadata_Errors];

export type ContentGetMetadata_Responses = {
    /**
     * OK
     */
    200: ContentMetadata;
};

export type ContentGetMetadata_Response = ContentGetMetadata_Responses[keyof ContentGetMetadata_Responses];

export type ContentPatchMetadata_Data = {
    /**
     * The values of the content item that should be updated.
     */
    body: ContentMetadata;
    path: {
        /**
         * The key of the content item to patch.
         */
        key: string;
    };
    query?: never;
    url: '/content/{key}';
};

export type ContentPatchMetadata_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentPatchMetadata_Error = ContentPatchMetadata_Errors[keyof ContentPatchMetadata_Errors];

export type ContentPatchMetadata_Responses = {
    /**
     * OK
     */
    200: ContentMetadata;
};

export type ContentPatchMetadata_Response = ContentPatchMetadata_Responses[keyof ContentPatchMetadata_Responses];

export type ContentGetPath_Data = {
    body?: never;
    path: {
        /**
         * The key of the content path to retrieve.
         */
        key: string;
    };
    query?: {
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/content/{key}/path';
};

export type ContentGetPath_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentGetPath_Error = ContentGetPath_Errors[keyof ContentGetPath_Errors];

export type ContentGetPath_Responses = {
    /**
     * OK
     */
    200: ContentMetadataPage;
};

export type ContentGetPath_Response = ContentGetPath_Responses[keyof ContentGetPath_Responses];

export type ContentListItems_Data = {
    body?: never;
    path: {
        /**
         * The key of the content to retrieve items for.
         */
        key: string;
    };
    query?: {
        /**
         * Indicates which content types or base types to include in the list.
         */
        contentTypes?: Array<string>;
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/content/{key}/items';
};

export type ContentListItems_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentListItems_Error = ContentListItems_Errors[keyof ContentListItems_Errors];

export type ContentListItems_Responses = {
    /**
     * OK
     */
    200: ContentMetadataPage;
};

export type ContentListItems_Response = ContentListItems_Responses[keyof ContentListItems_Responses];

export type ContentListAssets_Data = {
    body?: never;
    path: {
        /**
         * The key of the content to retrieve assets for.
         */
        key: string;
    };
    query?: {
        /**
         * Indicates which content types or base types to include in the list.
         */
        contentTypes?: Array<string>;
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/content/{key}/assets';
};

export type ContentListAssets_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentListAssets_Error = ContentListAssets_Errors[keyof ContentListAssets_Errors];

export type ContentListAssets_Responses = {
    /**
     * OK
     */
    200: ContentMetadataPage;
};

export type ContentListAssets_Response = ContentListAssets_Responses[keyof ContentListAssets_Responses];

export type ContentCopy_Data = {
    /**
     * Optional instructions for how to copy content.
     */
    body?: CopyContentOptions;
    path: {
        /**
         * The key of the content item to copy.
         */
        key: string;
    };
    query?: never;
    url: '/content/{key}:copy';
};

export type ContentCopy_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentCopy_Error = ContentCopy_Errors[keyof ContentCopy_Errors];

export type ContentCopy_Responses = {
    /**
     * OK
     */
    200: ContentMetadata;
};

export type ContentCopy_Response = ContentCopy_Responses[keyof ContentCopy_Responses];

export type ContentUndelete_Data = {
    body?: never;
    path: {
        /**
         * The key of the content item to undelete.
         */
        key: string;
    };
    query?: never;
    url: '/content/{key}:undelete';
};

export type ContentUndelete_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentUndelete_Error = ContentUndelete_Errors[keyof ContentUndelete_Errors];

export type ContentUndelete_Responses = {
    /**
     * OK
     */
    200: ContentMetadata;
};

export type ContentUndelete_Response = ContentUndelete_Responses[keyof ContentUndelete_Responses];

export type ContentListAllVersions_Data = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.
         * Locale must be a valid IETF BCP-47 language tag.
         */
        locales?: Array<string>;
        /**
         * Indicates which status content versions must have to be listed.
         */
        statuses?: Array<VersionStatus>;
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/content/versions';
};

export type ContentListAllVersions_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentListAllVersions_Error = ContentListAllVersions_Errors[keyof ContentListAllVersions_Errors];

export type ContentListAllVersions_Responses = {
    /**
     * OK
     */
    200: ContentItemListWithContentTypes;
};

export type ContentListAllVersions_Response = ContentListAllVersions_Responses[keyof ContentListAllVersions_Responses];

export type ContentDeleteLocale_Data = {
    body?: never;
    path: {
        key: string;
    };
    query?: {
        locale?: string;
    };
    url: '/content/{key}/versions';
};

export type ContentDeleteLocale_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentDeleteLocale_Error = ContentDeleteLocale_Errors[keyof ContentDeleteLocale_Errors];

export type ContentDeleteLocale_Responses = {
    /**
     * OK
     */
    200: ContentItemWithContentTypes;
};

export type ContentDeleteLocale_Response = ContentDeleteLocale_Responses[keyof ContentDeleteLocale_Responses];

export type ContentListVersions_Data = {
    body?: never;
    path: {
        key: string;
    };
    query?: {
        /**
         * Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.
         * Locale must be a valid IETF BCP-47 language tag.
         */
        locales?: Array<string>;
        /**
         * Indicates which status content versions must have to be listed.
         */
        statuses?: Array<VersionStatus>;
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/content/{key}/versions';
};

export type ContentListVersions_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentListVersions_Error = ContentListVersions_Errors[keyof ContentListVersions_Errors];

export type ContentListVersions_Responses = {
    /**
     * OK
     */
    200: ContentItemListWithContentTypes;
};

export type ContentListVersions_Response = ContentListVersions_Responses[keyof ContentListVersions_Responses];

export type ContentCreateVersion_Data = {
    /**
     * The content version that should be created.
     */
    body: ContentItem;
    path: {
        /**
         * The key of the content item for which a new content version should be created.
         */
        key: string;
    };
    query?: {
        /**
         * Indicates that the content validation should be ignored.
         */
        skipValidation?: boolean;
    };
    url: '/content/{key}/versions';
};

export type ContentCreateVersion_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentCreateVersion_Error = ContentCreateVersion_Errors[keyof ContentCreateVersion_Errors];

export type ContentCreateVersion_Responses = {
    /**
     * Created
     */
    201: ContentItemWithContentTypes;
};

export type ContentCreateVersion_Response = ContentCreateVersion_Responses[keyof ContentCreateVersion_Responses];

export type ContentDeleteVersion_Data = {
    body?: never;
    path: {
        key: string;
        version: string;
    };
    query?: never;
    url: '/content/{key}/versions/{version}';
};

export type ContentDeleteVersion_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentDeleteVersion_Error = ContentDeleteVersion_Errors[keyof ContentDeleteVersion_Errors];

export type ContentDeleteVersion_Responses = {
    /**
     * OK
     */
    200: ContentItemWithContentTypes;
};

export type ContentDeleteVersion_Response = ContentDeleteVersion_Responses[keyof ContentDeleteVersion_Responses];

export type ContentGetVersion_Data = {
    body?: never;
    path: {
        key: string;
        version: string;
    };
    query?: {
        locale?: string;
    };
    url: '/content/{key}/versions/{version}';
};

export type ContentGetVersion_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentGetVersion_Error = ContentGetVersion_Errors[keyof ContentGetVersion_Errors];

export type ContentGetVersion_Responses = {
    /**
     * OK
     */
    200: ContentItemWithContentTypes;
};

export type ContentGetVersion_Response = ContentGetVersion_Responses[keyof ContentGetVersion_Responses];

export type ContentPatchVersion_Data = {
    /**
     * The content information that should be updated.
     */
    body: ContentItem;
    path: {
        /**
         * The key of the content item that should be updated.
         */
        key: string;
        /**
         * The version of the content that should be updated.
         */
        version: string;
    };
    query?: {
        /**
         * The locale of the content that should be updated.
         */
        locale?: string;
        /**
         * Indicates that the content validation should be ignored.
         */
        skipValidation?: boolean;
    };
    url: '/content/{key}/versions/{version}';
};

export type ContentPatchVersion_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentPatchVersion_Error = ContentPatchVersion_Errors[keyof ContentPatchVersion_Errors];

export type ContentPatchVersion_Responses = {
    /**
     * OK
     */
    200: ContentItemWithContentTypes;
};

export type ContentPatchVersion_Response = ContentPatchVersion_Responses[keyof ContentPatchVersion_Responses];

export type ContentTypesList_Data = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Only include types that are available for creation under the provided container type
         */
        forContainerType?: string;
        /**
         * Indicates which sources should be included when listing content types.
         * Use All to include content types from all sources or
         * Default to include content types without a specific sources.
         */
        sources?: Array<string>;
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/contenttypes';
};

export type ContentTypesList_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentTypesList_Error = ContentTypesList_Errors[keyof ContentTypesList_Errors];

export type ContentTypesList_Responses = {
    /**
     * OK
     */
    200: ContentTypePage;
};

export type ContentTypesList_Response = ContentTypesList_Responses[keyof ContentTypesList_Responses];

export type ContentTypesCreate_Data = {
    /**
     * The content type that should be created.
     */
    body: ContentType;
    path?: never;
    query?: never;
    url: '/contenttypes';
};

export type ContentTypesCreate_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentTypesCreate_Error = ContentTypesCreate_Errors[keyof ContentTypesCreate_Errors];

export type ContentTypesCreate_Responses = {
    /**
     * OK
     */
    200: ContentType;
};

export type ContentTypesCreate_Response = ContentTypesCreate_Responses[keyof ContentTypesCreate_Responses];

export type ContentTypesDelete_Data = {
    body?: never;
    path: {
        /**
         * The key of the content type to delete.
         */
        key: string;
    };
    query?: never;
    url: '/contenttypes/{key}';
};

export type ContentTypesDelete_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentTypesDelete_Error = ContentTypesDelete_Errors[keyof ContentTypesDelete_Errors];

export type ContentTypesDelete_Responses = {
    /**
     * OK
     */
    200: ContentType;
};

export type ContentTypesDelete_Response = ContentTypesDelete_Responses[keyof ContentTypesDelete_Responses];

export type ContentTypesGet_Data = {
    body?: never;
    path: {
        /**
         * The key of the content type to retrieve.
         */
        key: string;
    };
    query?: never;
    url: '/contenttypes/{key}';
};

export type ContentTypesGet_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentTypesGet_Error = ContentTypesGet_Errors[keyof ContentTypesGet_Errors];

export type ContentTypesGet_Responses = {
    /**
     * OK
     */
    200: ContentType;
};

export type ContentTypesGet_Response = ContentTypesGet_Responses[keyof ContentTypesGet_Responses];

export type ContentTypesPatch_Data = {
    /**
     * The values of the content type that should be updated.
     */
    body: ContentType;
    path: {
        /**
         * The key of the content type to patch.
         */
        key: string;
    };
    query?: {
        /**
         * Update the content type even though the changes might result in data loss.
         */
        ignoreDataLossWarnings?: boolean;
    };
    url: '/contenttypes/{key}';
};

export type ContentTypesPatch_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentTypesPatch_Error = ContentTypesPatch_Errors[keyof ContentTypesPatch_Errors];

export type ContentTypesPatch_Responses = {
    /**
     * OK
     */
    200: ContentType;
};

export type ContentTypesPatch_Response = ContentTypesPatch_Responses[keyof ContentTypesPatch_Responses];

export type ContentTypesPut_Data = {
    /**
     * The values of the created or replaced content type.
     */
    body: ContentType;
    path: {
        /**
         * The key of the content type to update or create.
         */
        key: string;
    };
    query?: {
        /**
         * Update the content type even though the changes might result in data loss.
         */
        ignoreDataLossWarnings?: boolean;
    };
    url: '/contenttypes/{key}';
};

export type ContentTypesPut_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type ContentTypesPut_Error = ContentTypesPut_Errors[keyof ContentTypesPut_Errors];

export type ContentTypesPut_Responses = {
    /**
     * OK
     */
    200: ContentType;
};

export type ContentTypesPut_Response = ContentTypesPut_Responses[keyof ContentTypesPut_Responses];

export type DisplayTemplatesList_Data = {
    body?: never;
    path?: never;
    query?: {
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/displaytemplates';
};

export type DisplayTemplatesList_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type DisplayTemplatesList_Error = DisplayTemplatesList_Errors[keyof DisplayTemplatesList_Errors];

export type DisplayTemplatesList_Responses = {
    /**
     * OK
     */
    200: DisplayTemplatePage;
};

export type DisplayTemplatesList_Response = DisplayTemplatesList_Responses[keyof DisplayTemplatesList_Responses];

export type DisplayTemplatesCreate_Data = {
    /**
     * The display template that should be created.
     */
    body: DisplayTemplate;
    path?: never;
    query?: never;
    url: '/displaytemplates';
};

export type DisplayTemplatesCreate_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type DisplayTemplatesCreate_Error = DisplayTemplatesCreate_Errors[keyof DisplayTemplatesCreate_Errors];

export type DisplayTemplatesCreate_Responses = {
    /**
     * OK
     */
    200: DisplayTemplate;
};

export type DisplayTemplatesCreate_Response = DisplayTemplatesCreate_Responses[keyof DisplayTemplatesCreate_Responses];

export type DisplayTemplatesDelete_Data = {
    body?: never;
    path: {
        /**
         * The key of the display template to delete.
         */
        key: string;
    };
    query?: never;
    url: '/displaytemplates/{key}';
};

export type DisplayTemplatesDelete_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type DisplayTemplatesDelete_Error = DisplayTemplatesDelete_Errors[keyof DisplayTemplatesDelete_Errors];

export type DisplayTemplatesDelete_Responses = {
    /**
     * OK
     */
    200: DisplayTemplate;
};

export type DisplayTemplatesDelete_Response = DisplayTemplatesDelete_Responses[keyof DisplayTemplatesDelete_Responses];

export type DisplayTemplatesGet_Data = {
    body?: never;
    path: {
        /**
         * The key of the display template to retrieve.
         */
        key: string;
    };
    query?: never;
    url: '/displaytemplates/{key}';
};

export type DisplayTemplatesGet_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type DisplayTemplatesGet_Error = DisplayTemplatesGet_Errors[keyof DisplayTemplatesGet_Errors];

export type DisplayTemplatesGet_Responses = {
    /**
     * OK
     */
    200: DisplayTemplate;
};

export type DisplayTemplatesGet_Response = DisplayTemplatesGet_Responses[keyof DisplayTemplatesGet_Responses];

export type DisplayTemplatesPatch_Data = {
    /**
     * The values of the display template that should be updated.
     */
    body: DisplayTemplate;
    path: {
        /**
         * The key of the display template to patch.
         */
        key: string;
    };
    query?: never;
    url: '/displaytemplates/{key}';
};

export type DisplayTemplatesPatch_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type DisplayTemplatesPatch_Error = DisplayTemplatesPatch_Errors[keyof DisplayTemplatesPatch_Errors];

export type DisplayTemplatesPatch_Responses = {
    /**
     * OK
     */
    200: DisplayTemplate;
};

export type DisplayTemplatesPatch_Response = DisplayTemplatesPatch_Responses[keyof DisplayTemplatesPatch_Responses];

export type DisplayTemplatesPut_Data = {
    /**
     * The values of the created or replaced display template.
     */
    body: DisplayTemplate;
    path: {
        /**
         * The key of the display template to update or create.
         */
        key: string;
    };
    query?: never;
    url: '/displaytemplates/{key}';
};

export type DisplayTemplatesPut_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type DisplayTemplatesPut_Error = DisplayTemplatesPut_Errors[keyof DisplayTemplatesPut_Errors];

export type DisplayTemplatesPut_Responses = {
    /**
     * OK
     */
    200: DisplayTemplate;
};

export type DisplayTemplatesPut_Response = DisplayTemplatesPut_Responses[keyof DisplayTemplatesPut_Responses];

export type OauthToken_Data = {
    body: OauthTokenRequest;
    path?: never;
    query?: never;
    url: '/oauth/token';
};

export type OauthToken_Errors = {
    /**
     * Bad Request
     */
    400: OauthTokenError;
};

export type OauthToken_Error = OauthToken_Errors[keyof OauthToken_Errors];

export type OauthToken_Responses = {
    /**
     * OK
     */
    200: OauthToken;
};

export type OauthToken_Response = OauthToken_Responses[keyof OauthToken_Responses];

export type PropertyFormatsList_Data = {
    body?: never;
    path?: never;
    query?: {
        pageIndex?: number;
        pageSize?: number;
    };
    url: '/propertyformats';
};

export type PropertyFormatsList_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyFormatsList_Error = PropertyFormatsList_Errors[keyof PropertyFormatsList_Errors];

export type PropertyFormatsList_Responses = {
    /**
     * OK
     */
    200: PropertyFormatPage;
};

export type PropertyFormatsList_Response = PropertyFormatsList_Responses[keyof PropertyFormatsList_Responses];

export type PropertyFormatsGet_Data = {
    body?: never;
    path: {
        /**
         * The key of the property format to retrieve.
         */
        key: string;
    };
    query?: {
        /**
         * Indicates that a deleted property format may be returned.
         */
        allowDeleted?: boolean;
    };
    url: '/propertyformats/{key}';
};

export type PropertyFormatsGet_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyFormatsGet_Error = PropertyFormatsGet_Errors[keyof PropertyFormatsGet_Errors];

export type PropertyFormatsGet_Responses = {
    /**
     * OK
     */
    200: PropertyFormat;
};

export type PropertyFormatsGet_Response = PropertyFormatsGet_Responses[keyof PropertyFormatsGet_Responses];

export type PropertyGroupsList_Data = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Indicates which property groups sources that should be listed.
         * Use All to include groups from all sources or
         * Default to include groups without a specific sources.
         */
        sources?: Array<string>;
    };
    url: '/propertygroups';
};

export type PropertyGroupsList_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyGroupsList_Error = PropertyGroupsList_Errors[keyof PropertyGroupsList_Errors];

export type PropertyGroupsList_Responses = {
    /**
     * OK
     */
    200: PropertyGroupPage;
};

export type PropertyGroupsList_Response = PropertyGroupsList_Responses[keyof PropertyGroupsList_Responses];

export type PropertyGroupsCreate_Data = {
    /**
     * The property group that should be created.
     */
    body: PropertyGroup;
    path?: never;
    query?: never;
    url: '/propertygroups';
};

export type PropertyGroupsCreate_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyGroupsCreate_Error = PropertyGroupsCreate_Errors[keyof PropertyGroupsCreate_Errors];

export type PropertyGroupsCreate_Responses = {
    /**
     * OK
     */
    200: PropertyGroup;
};

export type PropertyGroupsCreate_Response = PropertyGroupsCreate_Responses[keyof PropertyGroupsCreate_Responses];

export type PropertyGroupsDelete_Data = {
    body?: never;
    path: {
        /**
         * The key of the property group to delete.
         */
        key: string;
    };
    query?: never;
    url: '/propertygroups/{key}';
};

export type PropertyGroupsDelete_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyGroupsDelete_Error = PropertyGroupsDelete_Errors[keyof PropertyGroupsDelete_Errors];

export type PropertyGroupsDelete_Responses = {
    /**
     * OK
     */
    200: PropertyGroup;
};

export type PropertyGroupsDelete_Response = PropertyGroupsDelete_Responses[keyof PropertyGroupsDelete_Responses];

export type PropertyGroupsGet_Data = {
    body?: never;
    path: {
        /**
         * The key of the property group to retrieve.
         */
        key: string;
    };
    query?: never;
    url: '/propertygroups/{key}';
};

export type PropertyGroupsGet_Errors = {
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyGroupsGet_Error = PropertyGroupsGet_Errors[keyof PropertyGroupsGet_Errors];

export type PropertyGroupsGet_Responses = {
    /**
     * OK
     */
    200: PropertyGroup;
};

export type PropertyGroupsGet_Response = PropertyGroupsGet_Responses[keyof PropertyGroupsGet_Responses];

export type PropertyGroupsPatch_Data = {
    /**
     * The values of the property group that should be updated.
     */
    body: PropertyGroup;
    path: {
        /**
         * The key of the property group to patch.
         */
        key: string;
    };
    query?: never;
    url: '/propertygroups/{key}';
};

export type PropertyGroupsPatch_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyGroupsPatch_Error = PropertyGroupsPatch_Errors[keyof PropertyGroupsPatch_Errors];

export type PropertyGroupsPatch_Responses = {
    /**
     * OK
     */
    200: PropertyGroup;
};

export type PropertyGroupsPatch_Response = PropertyGroupsPatch_Responses[keyof PropertyGroupsPatch_Responses];

export type PropertyGroupsPut_Data = {
    /**
     * The values of the created or replaced property group.
     */
    body: PropertyGroup;
    path: {
        /**
         * The key of the property group to update or create.
         */
        key: string;
    };
    query?: never;
    url: '/propertygroups/{key}';
};

export type PropertyGroupsPut_Errors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Forbidden
     */
    403: ProblemDetails;
};

export type PropertyGroupsPut_Error = PropertyGroupsPut_Errors[keyof PropertyGroupsPut_Errors];

export type PropertyGroupsPut_Responses = {
    /**
     * OK
     */
    200: PropertyGroup;
};

export type PropertyGroupsPut_Response = PropertyGroupsPut_Responses[keyof PropertyGroupsPut_Responses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/_cms/preview2` | (string & {});
};