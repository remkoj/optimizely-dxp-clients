// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ChangesetsListData, ChangesetsListResponses, ChangesetsListErrors, ChangesetsCreateData, ChangesetsCreateResponses, ChangesetsCreateErrors, ChangesetsDeleteData, ChangesetsDeleteResponses, ChangesetsDeleteErrors, ChangesetsGetData, ChangesetsGetResponses, ChangesetsGetErrors, ChangesetsPutData, ChangesetsPutResponses, ChangesetsPutErrors, ChangesetsDeleteItemData, ChangesetsDeleteItemResponses, ChangesetsDeleteItemErrors, ChangesetsGetItemData, ChangesetsGetItemResponses, ChangesetsGetItemErrors, ChangesetsListItemsData, ChangesetsListItemsResponses, ChangesetsListItemsErrors, ChangesetsCreateItemData, ChangesetsCreateItemResponses, ChangesetsCreateItemErrors, ChangesetsUpdateItemData, ChangesetsUpdateItemResponses, ChangesetsUpdateItemErrors, ContentCreateData, ContentCreateResponses, ContentCreateErrors, ContentDeleteData, ContentDeleteResponses, ContentDeleteErrors, ContentGetMetadataData, ContentGetMetadataResponses, ContentGetMetadataErrors, ContentPatchMetadataData, ContentPatchMetadataResponses, ContentPatchMetadataErrors, ContentGetPathData, ContentGetPathResponses, ContentGetPathErrors, ContentListItemsData, ContentListItemsResponses, ContentListItemsErrors, ContentListAssetsData, ContentListAssetsResponses, ContentListAssetsErrors, ContentCopyData, ContentCopyResponses, ContentCopyErrors, ContentUndeleteData, ContentUndeleteResponses, ContentUndeleteErrors, ContentListAllVersionsData, ContentListAllVersionsResponses, ContentListAllVersionsErrors, ContentDeleteLocaleData, ContentDeleteLocaleResponses, ContentDeleteLocaleErrors, ContentListVersionsData, ContentListVersionsResponses, ContentListVersionsErrors, ContentCreateVersionData, ContentCreateVersionResponses, ContentCreateVersionErrors, ContentDeleteVersionData, ContentDeleteVersionResponses, ContentDeleteVersionErrors, ContentGetVersionData, ContentGetVersionResponses, ContentGetVersionErrors, ContentPatchVersionData, ContentPatchVersionResponses, ContentPatchVersionErrors, ContentTypesListData, ContentTypesListResponses, ContentTypesListErrors, ContentTypesCreateData, ContentTypesCreateResponses, ContentTypesCreateErrors, ContentTypesDeleteData, ContentTypesDeleteResponses, ContentTypesDeleteErrors, ContentTypesGetData, ContentTypesGetResponses, ContentTypesGetErrors, ContentTypesPatchData, ContentTypesPatchResponses, ContentTypesPatchErrors, ContentTypesPutData, ContentTypesPutResponses, ContentTypesPutErrors, DisplayTemplatesListData, DisplayTemplatesListResponses, DisplayTemplatesListErrors, DisplayTemplatesCreateData, DisplayTemplatesCreateResponses, DisplayTemplatesCreateErrors, DisplayTemplatesDeleteData, DisplayTemplatesDeleteResponses, DisplayTemplatesDeleteErrors, DisplayTemplatesGetData, DisplayTemplatesGetResponses, DisplayTemplatesGetErrors, DisplayTemplatesPatchData, DisplayTemplatesPatchResponses, DisplayTemplatesPatchErrors, DisplayTemplatesPutData, DisplayTemplatesPutResponses, DisplayTemplatesPutErrors, OauthTokenData, OauthTokenResponses, OauthTokenErrors, PropertyFormatsListData, PropertyFormatsListResponses, PropertyFormatsListErrors, PropertyFormatsGetData, PropertyFormatsGetResponses, PropertyFormatsGetErrors, PropertyGroupsListData, PropertyGroupsListResponses, PropertyGroupsListErrors, PropertyGroupsCreateData, PropertyGroupsCreateResponses, PropertyGroupsCreateErrors, PropertyGroupsDeleteData, PropertyGroupsDeleteResponses, PropertyGroupsDeleteErrors, PropertyGroupsGetData, PropertyGroupsGetResponses, PropertyGroupsGetErrors, PropertyGroupsPatchData, PropertyGroupsPatchResponses, PropertyGroupsPatchErrors, PropertyGroupsPutData, PropertyGroupsPutResponses, PropertyGroupsPutErrors } from './types.gen';
import { changesetsListResponseTransformer, changesetsCreateResponseTransformer, changesetsDeleteResponseTransformer, changesetsGetResponseTransformer, changesetsPutResponseTransformer, contentCreateResponseTransformer, contentDeleteResponseTransformer, contentGetMetadataResponseTransformer, contentPatchMetadataResponseTransformer, contentGetPathResponseTransformer, contentListItemsResponseTransformer, contentListAssetsResponseTransformer, contentCopyResponseTransformer, contentUndeleteResponseTransformer, contentListAllVersionsResponseTransformer, contentDeleteLocaleResponseTransformer, contentListVersionsResponseTransformer, contentCreateVersionResponseTransformer, contentDeleteVersionResponseTransformer, contentGetVersionResponseTransformer, contentPatchVersionResponseTransformer, contentTypesListResponseTransformer, contentTypesCreateResponseTransformer, contentTypesDeleteResponseTransformer, contentTypesGetResponseTransformer, contentTypesPatchResponseTransformer, contentTypesPutResponseTransformer, displayTemplatesListResponseTransformer, displayTemplatesCreateResponseTransformer, displayTemplatesDeleteResponseTransformer, displayTemplatesGetResponseTransformer, displayTemplatesPatchResponseTransformer, displayTemplatesPutResponseTransformer } from './transformers.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List changeset
 * Lists all changeset using the provided options.
 */
export const changesetsList = <ThrowOnError extends boolean = false>(options?: Options<ChangesetsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChangesetsListResponses, ChangesetsListErrors, ThrowOnError>({
        responseTransformer: changesetsListResponseTransformer,
        url: '/changesets',
        ...options
    });
};

/**
 * Create changeset
 * Creates a new changeset.
 */
export const changesetsCreate = <ThrowOnError extends boolean = false>(options: Options<ChangesetsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangesetsCreateResponses, ChangesetsCreateErrors, ThrowOnError>({
        responseTransformer: changesetsCreateResponseTransformer,
        url: '/changesets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete changeset
 * Deletes the changeset with the provided key. If a changeset with the provided key does not exist an error is returned.
 */
export const changesetsDelete = <ThrowOnError extends boolean = false>(options: Options<ChangesetsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ChangesetsDeleteResponses, ChangesetsDeleteErrors, ThrowOnError>({
        responseTransformer: changesetsDeleteResponseTransformer,
        url: '/changesets/{key}',
        ...options
    });
};

/**
 * Get changeset
 * Gets the changeset with the provided key.
 */
export const changesetsGet = <ThrowOnError extends boolean = false>(options: Options<ChangesetsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChangesetsGetResponses, ChangesetsGetErrors, ThrowOnError>({
        responseTransformer: changesetsGetResponseTransformer,
        url: '/changesets/{key}',
        ...options
    });
};

/**
 * Create or replace changeset
 * Creates or replaces a changeset. If a changeset with the provided key exist it is replaced.
 * Otherwise a new changeset is created.
 */
export const changesetsPut = <ThrowOnError extends boolean = false>(options: Options<ChangesetsPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangesetsPutResponses, ChangesetsPutErrors, ThrowOnError>({
        responseTransformer: changesetsPutResponseTransformer,
        url: '/changesets/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete changeset item
 * Deletes the specified changeset item from the changeset.
 */
export const changesetsDeleteItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsDeleteItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ChangesetsDeleteItemResponses, ChangesetsDeleteItemErrors, ThrowOnError>({
        url: '/changesets/{changeset}/items/{key}/versions/{version}',
        ...options
    });
};

/**
 * Get changeset item
 * Gets the changeset item for the specified content reference.
 */
export const changesetsGetItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsGetItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChangesetsGetItemResponses, ChangesetsGetItemErrors, ThrowOnError>({
        url: '/changesets/{changeset}/items/{key}/versions/{version}',
        ...options
    });
};

/**
 * List changeset items
 * Lists the available changeset items for the specified changeset using
 * the provided options.
 */
export const changesetsListItems = <ThrowOnError extends boolean = false>(options: Options<ChangesetsListItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChangesetsListItemsResponses, ChangesetsListItemsErrors, ThrowOnError>({
        url: '/changesets/{changeset}/items',
        ...options
    });
};

/**
 * Create changeset item
 * Creates the given changeset item.
 */
export const changesetsCreateItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsCreateItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangesetsCreateItemResponses, ChangesetsCreateItemErrors, ThrowOnError>({
        url: '/changesets/{changeset}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update changeset item
 * Updates the given changeset item.
 */
export const changesetsUpdateItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsUpdateItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangesetsUpdateItemResponses, ChangesetsUpdateItemErrors, ThrowOnError>({
        url: '/changesets/{changeset}/items/{contentKey}/versions/{contentVersion}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create content
 * Create a new content item.
 */
export const contentCreate = <ThrowOnError extends boolean = false>(options: Options<ContentCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentCreateResponses, ContentCreateErrors, ThrowOnError>({
        responseTransformer: contentCreateResponseTransformer,
        url: '/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete content
 * Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
 */
export const contentDelete = <ThrowOnError extends boolean = false>(options: Options<ContentDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentDeleteResponses, ContentDeleteErrors, ThrowOnError>({
        responseTransformer: contentDeleteResponseTransformer,
        url: '/content/{key}',
        ...options
    });
};

/**
 * Get content
 * Get shared metadata about the content instance with the provided key.
 */
export const contentGetMetadata = <ThrowOnError extends boolean = false>(options: Options<ContentGetMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentGetMetadataResponses, ContentGetMetadataErrors, ThrowOnError>({
        responseTransformer: contentGetMetadataResponseTransformer,
        url: '/content/{key}',
        ...options
    });
};

/**
 * Update content
 * Update an existing content item. If a content item with the provided key does not exist an error is returned.
 */
export const contentPatchMetadata = <ThrowOnError extends boolean = false>(options: Options<ContentPatchMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ContentPatchMetadataResponses, ContentPatchMetadataErrors, ThrowOnError>({
        responseTransformer: contentPatchMetadataResponseTransformer,
        url: '/content/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Get content path
 * Get the content path with the provided key.
 */
export const contentGetPath = <ThrowOnError extends boolean = false>(options: Options<ContentGetPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentGetPathResponses, ContentGetPathErrors, ThrowOnError>({
        responseTransformer: contentGetPathResponseTransformer,
        url: '/content/{key}/path',
        ...options
    });
};

/**
 * List content in container
 * List the content items located in a specific container.
 */
export const contentListItems = <ThrowOnError extends boolean = false>(options: Options<ContentListItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentListItemsResponses, ContentListItemsErrors, ThrowOnError>({
        responseTransformer: contentListItemsResponseTransformer,
        url: '/content/{key}/items',
        ...options
    });
};

/**
 * List assets
 * List the assets that belongs to a content instance.
 */
export const contentListAssets = <ThrowOnError extends boolean = false>(options: Options<ContentListAssetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentListAssetsResponses, ContentListAssetsErrors, ThrowOnError>({
        responseTransformer: contentListAssetsResponseTransformer,
        url: '/content/{key}/assets',
        ...options
    });
};

/**
 * Copy content
 * Create a copy of the content item with the provided key.
 */
export const contentCopy = <ThrowOnError extends boolean = false>(options: Options<ContentCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentCopyResponses, ContentCopyErrors, ThrowOnError>({
        responseTransformer: contentCopyResponseTransformer,
        url: '/content/{key}:copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Restore content
 * Restore the deleted content item with the provided key. If a content item with the provided key is not deleted an error is returned.
 */
export const contentUndelete = <ThrowOnError extends boolean = false>(options: Options<ContentUndeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentUndeleteResponses, ContentUndeleteErrors, ThrowOnError>({
        responseTransformer: contentUndeleteResponseTransformer,
        url: '/content/{key}:undelete',
        ...options
    });
};

/**
 * Query versions
 * List content versions based on the provided query options.
 */
export const contentListAllVersions = <ThrowOnError extends boolean = false>(options?: Options<ContentListAllVersionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ContentListAllVersionsResponses, ContentListAllVersionsErrors, ThrowOnError>({
        responseTransformer: contentListAllVersionsResponseTransformer,
        url: '/content/versions',
        ...options
    });
};

/**
 * Delete locale
 * Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
 */
export const contentDeleteLocale = <ThrowOnError extends boolean = false>(options: Options<ContentDeleteLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentDeleteLocaleResponses, ContentDeleteLocaleErrors, ThrowOnError>({
        responseTransformer: contentDeleteLocaleResponseTransformer,
        url: '/content/{key}/versions',
        ...options
    });
};

/**
 * List versions
 * List versions of the content item with the provided key and the provided options.
 */
export const contentListVersions = <ThrowOnError extends boolean = false>(options: Options<ContentListVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentListVersionsResponses, ContentListVersionsErrors, ThrowOnError>({
        responseTransformer: contentListVersionsResponseTransformer,
        url: '/content/{key}/versions',
        ...options
    });
};

/**
 * Create version
 * Create a new version of a content item.
 */
export const contentCreateVersion = <ThrowOnError extends boolean = false>(options: Options<ContentCreateVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentCreateVersionResponses, ContentCreateVersionErrors, ThrowOnError>({
        responseTransformer: contentCreateVersionResponseTransformer,
        url: '/content/{key}/versions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete version
 * Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
 */
export const contentDeleteVersion = <ThrowOnError extends boolean = false>(options: Options<ContentDeleteVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentDeleteVersionResponses, ContentDeleteVersionErrors, ThrowOnError>({
        responseTransformer: contentDeleteVersionResponseTransformer,
        url: '/content/{key}/versions/{version}',
        ...options
    });
};

/**
 * Get version
 * Get the content item with the provided key and version.
 */
export const contentGetVersion = <ThrowOnError extends boolean = false>(options: Options<ContentGetVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentGetVersionResponses, ContentGetVersionErrors, ThrowOnError>({
        responseTransformer: contentGetVersionResponseTransformer,
        url: '/content/{key}/versions/{version}',
        ...options
    });
};

/**
 * Update version
 * Update an existing content item. If a content item with the provided key does not exist an error is returned.
 */
export const contentPatchVersion = <ThrowOnError extends boolean = false>(options: Options<ContentPatchVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ContentPatchVersionResponses, ContentPatchVersionErrors, ThrowOnError>({
        responseTransformer: contentPatchVersionResponseTransformer,
        url: '/content/{key}/versions/{version}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * List content types
 * List content types using the provided options.
 */
export const contentTypesList = <ThrowOnError extends boolean = false>(options?: Options<ContentTypesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ContentTypesListResponses, ContentTypesListErrors, ThrowOnError>({
        responseTransformer: contentTypesListResponseTransformer,
        url: '/contenttypes',
        ...options
    });
};

/**
 * Create content type
 * Create a new content type.
 */
export const contentTypesCreate = <ThrowOnError extends boolean = false>(options: Options<ContentTypesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentTypesCreateResponses, ContentTypesCreateErrors, ThrowOnError>({
        responseTransformer: contentTypesCreateResponseTransformer,
        url: '/contenttypes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete content type
 * Deletes the content type with the provided key. If a content type with the provided key does not exist an error is returned.
 */
export const contentTypesDelete = <ThrowOnError extends boolean = false>(options: Options<ContentTypesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentTypesDeleteResponses, ContentTypesDeleteErrors, ThrowOnError>({
        responseTransformer: contentTypesDeleteResponseTransformer,
        url: '/contenttypes/{key}',
        ...options
    });
};

/**
 * Get content type
 * Get the content type with the provided key.
 */
export const contentTypesGet = <ThrowOnError extends boolean = false>(options: Options<ContentTypesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentTypesGetResponses, ContentTypesGetErrors, ThrowOnError>({
        responseTransformer: contentTypesGetResponseTransformer,
        url: '/contenttypes/{key}',
        ...options
    });
};

/**
 * Update content type
 * Update an existing content type. If a content type with the provided key does not exist an error is returned.
 */
export const contentTypesPatch = <ThrowOnError extends boolean = false>(options: Options<ContentTypesPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ContentTypesPatchResponses, ContentTypesPatchErrors, ThrowOnError>({
        responseTransformer: contentTypesPatchResponseTransformer,
        url: '/contenttypes/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Create or replace content type
 * Create or replace a content type. If a content type with the provided key exist it is replaced.
 * Otherwise a new content type is created.
 */
export const contentTypesPut = <ThrowOnError extends boolean = false>(options: Options<ContentTypesPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ContentTypesPutResponses, ContentTypesPutErrors, ThrowOnError>({
        responseTransformer: contentTypesPutResponseTransformer,
        url: '/contenttypes/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List display templates
 * List display templates using the provided options.
 */
export const displayTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<DisplayTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DisplayTemplatesListResponses, DisplayTemplatesListErrors, ThrowOnError>({
        responseTransformer: displayTemplatesListResponseTransformer,
        url: '/displaytemplates',
        ...options
    });
};

/**
 * Create display template
 * Create a new display template.
 */
export const displayTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DisplayTemplatesCreateResponses, DisplayTemplatesCreateErrors, ThrowOnError>({
        responseTransformer: displayTemplatesCreateResponseTransformer,
        url: '/displaytemplates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete display template
 * Deletes the display template with the provided key.
 */
export const displayTemplatesDelete = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DisplayTemplatesDeleteResponses, DisplayTemplatesDeleteErrors, ThrowOnError>({
        responseTransformer: displayTemplatesDeleteResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options
    });
};

/**
 * Get display template
 * Get the display template with the provided key.
 */
export const displayTemplatesGet = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DisplayTemplatesGetResponses, DisplayTemplatesGetErrors, ThrowOnError>({
        responseTransformer: displayTemplatesGetResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options
    });
};

/**
 * Update display template
 * Update an existing display template.
 */
export const displayTemplatesPatch = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<DisplayTemplatesPatchResponses, DisplayTemplatesPatchErrors, ThrowOnError>({
        responseTransformer: displayTemplatesPatchResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Create or replace a display template
 * Create or replace a display template. If a display template with the provided key exist it is replaced.
 * Otherwise a new display template is created.
 */
export const displayTemplatesPut = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<DisplayTemplatesPutResponses, DisplayTemplatesPutErrors, ThrowOnError>({
        responseTransformer: displayTemplatesPutResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request access token
 * Request an access token. This endpoint only supports the 'client_credentials' grant type
 * and will only issue short-lived tokens.
 */
export const oauthToken = <ThrowOnError extends boolean = false>(options: Options<OauthTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthTokenResponses, OauthTokenErrors, ThrowOnError>({
        url: '/oauth/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List property formats
 * List all property formats using the provided options.
 */
export const propertyFormatsList = <ThrowOnError extends boolean = false>(options?: Options<PropertyFormatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PropertyFormatsListResponses, PropertyFormatsListErrors, ThrowOnError>({
        url: '/propertyformats',
        ...options
    });
};

/**
 * Get property format
 * Get the property format with the provided key.
 */
export const propertyFormatsGet = <ThrowOnError extends boolean = false>(options: Options<PropertyFormatsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PropertyFormatsGetResponses, PropertyFormatsGetErrors, ThrowOnError>({
        url: '/propertyformats/{key}',
        ...options
    });
};

/**
 * List property groups
 * List property groups using the provided options.
 */
export const propertyGroupsList = <ThrowOnError extends boolean = false>(options?: Options<PropertyGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PropertyGroupsListResponses, PropertyGroupsListErrors, ThrowOnError>({
        url: '/propertygroups',
        ...options
    });
};

/**
 * Create property group
 * Create a new property group.
 */
export const propertyGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PropertyGroupsCreateResponses, PropertyGroupsCreateErrors, ThrowOnError>({
        url: '/propertygroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete property group
 * Deletes the property group with the provided key.
 */
export const propertyGroupsDelete = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PropertyGroupsDeleteResponses, PropertyGroupsDeleteErrors, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options
    });
};

/**
 * Get property group
 * Get the property group with the provided key.
 */
export const propertyGroupsGet = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PropertyGroupsGetResponses, PropertyGroupsGetErrors, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options
    });
};

/**
 * Update property group
 * Update an existing property group.
 */
export const propertyGroupsPatch = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PropertyGroupsPatchResponses, PropertyGroupsPatchErrors, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Create or replace property group
 * Create or replace a property group. If a property group with the provided key exist it is replaced.
 * Otherwise a new property group is created.
 */
export const propertyGroupsPut = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PropertyGroupsPutResponses, PropertyGroupsPutErrors, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};