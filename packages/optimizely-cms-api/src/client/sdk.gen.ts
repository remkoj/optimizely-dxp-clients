// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ChangesetsList_Data, ChangesetsList_Response, ChangesetsList_Error, ChangesetsCreate_Data, ChangesetsCreate_Response, ChangesetsCreate_Error, ChangesetsDelete_Data, ChangesetsDelete_Response, ChangesetsDelete_Error, ChangesetsGet_Data, ChangesetsGet_Response, ChangesetsGet_Error, ChangesetsPut_Data, ChangesetsPut_Response, ChangesetsPut_Error, ChangesetsDeleteItem_Data, ChangesetsDeleteItem_Response, ChangesetsDeleteItem_Error, ChangesetsGetItem_Data, ChangesetsGetItem_Response, ChangesetsGetItem_Error, ChangesetsListItems_Data, ChangesetsListItems_Response, ChangesetsListItems_Error, ChangesetsCreateItem_Data, ChangesetsCreateItem_Response, ChangesetsCreateItem_Error, ChangesetsUpdateItem_Data, ChangesetsUpdateItem_Response, ChangesetsUpdateItem_Error, ContentCreate_Data, ContentCreate_Response, ContentCreate_Error, ContentDelete_Data, ContentDelete_Response, ContentDelete_Error, ContentGetMetadata_Data, ContentGetMetadata_Response, ContentGetMetadata_Error, ContentPatchMetadata_Data, ContentPatchMetadata_Response, ContentPatchMetadata_Error, ContentGetPath_Data, ContentGetPath_Response, ContentGetPath_Error, ContentListItems_Data, ContentListItems_Response, ContentListItems_Error, ContentListAssets_Data, ContentListAssets_Response, ContentListAssets_Error, ContentCopy_Data, ContentCopy_Response, ContentCopy_Error, ContentUndelete_Data, ContentUndelete_Response, ContentUndelete_Error, ContentListAllVersions_Data, ContentListAllVersions_Response, ContentListAllVersions_Error, ContentDeleteLocale_Data, ContentDeleteLocale_Response, ContentDeleteLocale_Error, ContentListVersions_Data, ContentListVersions_Response, ContentListVersions_Error, ContentCreateVersion_Data, ContentCreateVersion_Response, ContentCreateVersion_Error, ContentDeleteVersion_Data, ContentDeleteVersion_Response, ContentDeleteVersion_Error, ContentGetVersion_Data, ContentGetVersion_Response, ContentGetVersion_Error, ContentPatchVersion_Data, ContentPatchVersion_Response, ContentPatchVersion_Error, ContentTypesList_Data, ContentTypesList_Response, ContentTypesList_Error, ContentTypesCreate_Data, ContentTypesCreate_Response, ContentTypesCreate_Error, ContentTypesDelete_Data, ContentTypesDelete_Response, ContentTypesDelete_Error, ContentTypesGet_Data, ContentTypesGet_Response, ContentTypesGet_Error, ContentTypesPatch_Data, ContentTypesPatch_Response, ContentTypesPatch_Error, ContentTypesPut_Data, ContentTypesPut_Response, ContentTypesPut_Error, DisplayTemplatesList_Data, DisplayTemplatesList_Response, DisplayTemplatesList_Error, DisplayTemplatesCreate_Data, DisplayTemplatesCreate_Response, DisplayTemplatesCreate_Error, DisplayTemplatesDelete_Data, DisplayTemplatesDelete_Response, DisplayTemplatesDelete_Error, DisplayTemplatesGet_Data, DisplayTemplatesGet_Response, DisplayTemplatesGet_Error, DisplayTemplatesPatch_Data, DisplayTemplatesPatch_Response, DisplayTemplatesPatch_Error, DisplayTemplatesPut_Data, DisplayTemplatesPut_Response, DisplayTemplatesPut_Error, OauthToken_Data, OauthToken_Response, OauthToken_Error, PropertyFormatsList_Data, PropertyFormatsList_Response, PropertyFormatsList_Error, PropertyFormatsGet_Data, PropertyFormatsGet_Response, PropertyFormatsGet_Error, PropertyGroupsList_Data, PropertyGroupsList_Response, PropertyGroupsList_Error, PropertyGroupsCreate_Data, PropertyGroupsCreate_Response, PropertyGroupsCreate_Error, PropertyGroupsDelete_Data, PropertyGroupsDelete_Response, PropertyGroupsDelete_Error, PropertyGroupsGet_Data, PropertyGroupsGet_Response, PropertyGroupsGet_Error, PropertyGroupsPatch_Data, PropertyGroupsPatch_Response, PropertyGroupsPatch_Error, PropertyGroupsPut_Data, PropertyGroupsPut_Response, PropertyGroupsPut_Error } from './types.gen';
import { changesetsListResponseTransformer, changesetsCreateResponseTransformer, changesetsDeleteResponseTransformer, changesetsGetResponseTransformer, changesetsPutResponseTransformer, contentCreateResponseTransformer, contentDeleteResponseTransformer, contentGetMetadataResponseTransformer, contentPatchMetadataResponseTransformer, contentGetPathResponseTransformer, contentListItemsResponseTransformer, contentListAssetsResponseTransformer, contentCopyResponseTransformer, contentUndeleteResponseTransformer, contentListAllVersionsResponseTransformer, contentDeleteLocaleResponseTransformer, contentListVersionsResponseTransformer, contentCreateVersionResponseTransformer, contentDeleteVersionResponseTransformer, contentGetVersionResponseTransformer, contentPatchVersionResponseTransformer, contentTypesListResponseTransformer, contentTypesCreateResponseTransformer, contentTypesDeleteResponseTransformer, contentTypesGetResponseTransformer, contentTypesPatchResponseTransformer, contentTypesPutResponseTransformer, displayTemplatesListResponseTransformer, displayTemplatesCreateResponseTransformer, displayTemplatesDeleteResponseTransformer, displayTemplatesGetResponseTransformer, displayTemplatesPatchResponseTransformer, displayTemplatesPutResponseTransformer } from './transformers.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List changeset
 * Lists all changeset using the provided options.
 */
export const changesetsList = <ThrowOnError extends boolean = false>(options?: Options<ChangesetsList_Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChangesetsList_Response, ChangesetsList_Error, ThrowOnError>({
        responseTransformer: changesetsListResponseTransformer,
        url: '/changesets',
        ...options
    });
};

/**
 * Create changeset
 * Creates a new changeset.
 */
export const changesetsCreate = <ThrowOnError extends boolean = false>(options: Options<ChangesetsCreate_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangesetsCreate_Response, ChangesetsCreate_Error, ThrowOnError>({
        responseTransformer: changesetsCreateResponseTransformer,
        url: '/changesets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete changeset
 * Deletes the changeset with the provided key. If a changeset with the provided key does not exist an error is returned.
 */
export const changesetsDelete = <ThrowOnError extends boolean = false>(options: Options<ChangesetsDelete_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ChangesetsDelete_Response, ChangesetsDelete_Error, ThrowOnError>({
        responseTransformer: changesetsDeleteResponseTransformer,
        url: '/changesets/{key}',
        ...options
    });
};

/**
 * Get changeset
 * Gets the changeset with the provided key.
 */
export const changesetsGet = <ThrowOnError extends boolean = false>(options: Options<ChangesetsGet_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChangesetsGet_Response, ChangesetsGet_Error, ThrowOnError>({
        responseTransformer: changesetsGetResponseTransformer,
        url: '/changesets/{key}',
        ...options
    });
};

/**
 * Create or replace changeset
 * Creates or replaces a changeset. If a changeset with the provided key exist it is replaced.
 * Otherwise a new changeset is created.
 */
export const changesetsPut = <ThrowOnError extends boolean = false>(options: Options<ChangesetsPut_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangesetsPut_Response, ChangesetsPut_Error, ThrowOnError>({
        responseTransformer: changesetsPutResponseTransformer,
        url: '/changesets/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete changeset item
 * Deletes the specified changeset item from the changeset.
 */
export const changesetsDeleteItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsDeleteItem_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ChangesetsDeleteItem_Response, ChangesetsDeleteItem_Error, ThrowOnError>({
        url: '/changesets/{changeset}/items/{key}/versions/{version}',
        ...options
    });
};

/**
 * Get changeset item
 * Gets the changeset item for the specified content reference.
 */
export const changesetsGetItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsGetItem_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChangesetsGetItem_Response, ChangesetsGetItem_Error, ThrowOnError>({
        url: '/changesets/{changeset}/items/{key}/versions/{version}',
        ...options
    });
};

/**
 * List changeset items
 * Lists the available changeset items for the specified changeset using
 * the provided options.
 */
export const changesetsListItems = <ThrowOnError extends boolean = false>(options: Options<ChangesetsListItems_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChangesetsListItems_Response, ChangesetsListItems_Error, ThrowOnError>({
        url: '/changesets/{changeset}/items',
        ...options
    });
};

/**
 * Create changeset item
 * Creates the given changeset item.
 */
export const changesetsCreateItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsCreateItem_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangesetsCreateItem_Response, ChangesetsCreateItem_Error, ThrowOnError>({
        url: '/changesets/{changeset}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update changeset item
 * Updates the given changeset item.
 */
export const changesetsUpdateItem = <ThrowOnError extends boolean = false>(options: Options<ChangesetsUpdateItem_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangesetsUpdateItem_Response, ChangesetsUpdateItem_Error, ThrowOnError>({
        url: '/changesets/{changeset}/items/{contentKey}/versions/{contentVersion}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create content
 * Create a new content item.
 */
export const contentCreate = <ThrowOnError extends boolean = false>(options: Options<ContentCreate_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentCreate_Response, ContentCreate_Error, ThrowOnError>({
        responseTransformer: contentCreateResponseTransformer,
        url: '/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete content
 * Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
 */
export const contentDelete = <ThrowOnError extends boolean = false>(options: Options<ContentDelete_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentDelete_Response, ContentDelete_Error, ThrowOnError>({
        responseTransformer: contentDeleteResponseTransformer,
        url: '/content/{key}',
        ...options
    });
};

/**
 * Get content
 * Get shared metadata about the content instance with the provided key.
 */
export const contentGetMetadata = <ThrowOnError extends boolean = false>(options: Options<ContentGetMetadata_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentGetMetadata_Response, ContentGetMetadata_Error, ThrowOnError>({
        responseTransformer: contentGetMetadataResponseTransformer,
        url: '/content/{key}',
        ...options
    });
};

/**
 * Update content
 * Update an existing content item. If a content item with the provided key does not exist an error is returned.
 */
export const contentPatchMetadata = <ThrowOnError extends boolean = false>(options: Options<ContentPatchMetadata_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ContentPatchMetadata_Response, ContentPatchMetadata_Error, ThrowOnError>({
        responseTransformer: contentPatchMetadataResponseTransformer,
        url: '/content/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Get content path
 * Get the content path with the provided key.
 */
export const contentGetPath = <ThrowOnError extends boolean = false>(options: Options<ContentGetPath_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentGetPath_Response, ContentGetPath_Error, ThrowOnError>({
        responseTransformer: contentGetPathResponseTransformer,
        url: '/content/{key}/path',
        ...options
    });
};

/**
 * List content in container
 * List the content items located in a specific container.
 */
export const contentListItems = <ThrowOnError extends boolean = false>(options: Options<ContentListItems_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentListItems_Response, ContentListItems_Error, ThrowOnError>({
        responseTransformer: contentListItemsResponseTransformer,
        url: '/content/{key}/items',
        ...options
    });
};

/**
 * List assets
 * List the assets that belongs to a content instance.
 */
export const contentListAssets = <ThrowOnError extends boolean = false>(options: Options<ContentListAssets_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentListAssets_Response, ContentListAssets_Error, ThrowOnError>({
        responseTransformer: contentListAssetsResponseTransformer,
        url: '/content/{key}/assets',
        ...options
    });
};

/**
 * Copy content
 * Create a copy of the content item with the provided key.
 */
export const contentCopy = <ThrowOnError extends boolean = false>(options: Options<ContentCopy_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentCopy_Response, ContentCopy_Error, ThrowOnError>({
        responseTransformer: contentCopyResponseTransformer,
        url: '/content/{key}:copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Restore content
 * Restore the deleted content item with the provided key. If a content item with the provided key is not deleted an error is returned.
 */
export const contentUndelete = <ThrowOnError extends boolean = false>(options: Options<ContentUndelete_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentUndelete_Response, ContentUndelete_Error, ThrowOnError>({
        responseTransformer: contentUndeleteResponseTransformer,
        url: '/content/{key}:undelete',
        ...options
    });
};

/**
 * Query versions
 * List content versions based on the provided query options.
 */
export const contentListAllVersions = <ThrowOnError extends boolean = false>(options?: Options<ContentListAllVersions_Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ContentListAllVersions_Response, ContentListAllVersions_Error, ThrowOnError>({
        responseTransformer: contentListAllVersionsResponseTransformer,
        url: '/content/versions',
        ...options
    });
};

/**
 * Delete locale
 * Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
 */
export const contentDeleteLocale = <ThrowOnError extends boolean = false>(options: Options<ContentDeleteLocale_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentDeleteLocale_Response, ContentDeleteLocale_Error, ThrowOnError>({
        responseTransformer: contentDeleteLocaleResponseTransformer,
        url: '/content/{key}/versions',
        ...options
    });
};

/**
 * List versions
 * List versions of the content item with the provided key and the provided options.
 */
export const contentListVersions = <ThrowOnError extends boolean = false>(options: Options<ContentListVersions_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentListVersions_Response, ContentListVersions_Error, ThrowOnError>({
        responseTransformer: contentListVersionsResponseTransformer,
        url: '/content/{key}/versions',
        ...options
    });
};

/**
 * Create version
 * Create a new version of a content item.
 */
export const contentCreateVersion = <ThrowOnError extends boolean = false>(options: Options<ContentCreateVersion_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentCreateVersion_Response, ContentCreateVersion_Error, ThrowOnError>({
        responseTransformer: contentCreateVersionResponseTransformer,
        url: '/content/{key}/versions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete version
 * Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
 */
export const contentDeleteVersion = <ThrowOnError extends boolean = false>(options: Options<ContentDeleteVersion_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentDeleteVersion_Response, ContentDeleteVersion_Error, ThrowOnError>({
        responseTransformer: contentDeleteVersionResponseTransformer,
        url: '/content/{key}/versions/{version}',
        ...options
    });
};

/**
 * Get version
 * Get the content item with the provided key and version.
 */
export const contentGetVersion = <ThrowOnError extends boolean = false>(options: Options<ContentGetVersion_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentGetVersion_Response, ContentGetVersion_Error, ThrowOnError>({
        responseTransformer: contentGetVersionResponseTransformer,
        url: '/content/{key}/versions/{version}',
        ...options
    });
};

/**
 * Update version
 * Update an existing content item. If a content item with the provided key does not exist an error is returned.
 */
export const contentPatchVersion = <ThrowOnError extends boolean = false>(options: Options<ContentPatchVersion_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ContentPatchVersion_Response, ContentPatchVersion_Error, ThrowOnError>({
        responseTransformer: contentPatchVersionResponseTransformer,
        url: '/content/{key}/versions/{version}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * List content types
 * List content types using the provided options.
 */
export const contentTypesList = <ThrowOnError extends boolean = false>(options?: Options<ContentTypesList_Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ContentTypesList_Response, ContentTypesList_Error, ThrowOnError>({
        responseTransformer: contentTypesListResponseTransformer,
        url: '/contenttypes',
        ...options
    });
};

/**
 * Create content type
 * Create a new content type.
 */
export const contentTypesCreate = <ThrowOnError extends boolean = false>(options: Options<ContentTypesCreate_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContentTypesCreate_Response, ContentTypesCreate_Error, ThrowOnError>({
        responseTransformer: contentTypesCreateResponseTransformer,
        url: '/contenttypes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete content type
 * Deletes the content type with the provided key. If a content type with the provided key does not exist an error is returned.
 */
export const contentTypesDelete = <ThrowOnError extends boolean = false>(options: Options<ContentTypesDelete_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContentTypesDelete_Response, ContentTypesDelete_Error, ThrowOnError>({
        responseTransformer: contentTypesDeleteResponseTransformer,
        url: '/contenttypes/{key}',
        ...options
    });
};

/**
 * Get content type
 * Get the content type with the provided key.
 */
export const contentTypesGet = <ThrowOnError extends boolean = false>(options: Options<ContentTypesGet_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContentTypesGet_Response, ContentTypesGet_Error, ThrowOnError>({
        responseTransformer: contentTypesGetResponseTransformer,
        url: '/contenttypes/{key}',
        ...options
    });
};

/**
 * Update content type
 * Update an existing content type. If a content type with the provided key does not exist an error is returned.
 */
export const contentTypesPatch = <ThrowOnError extends boolean = false>(options: Options<ContentTypesPatch_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ContentTypesPatch_Response, ContentTypesPatch_Error, ThrowOnError>({
        responseTransformer: contentTypesPatchResponseTransformer,
        url: '/contenttypes/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Create or replace content type
 * Create or replace a content type. If a content type with the provided key exist it is replaced.
 * Otherwise a new content type is created.
 */
export const contentTypesPut = <ThrowOnError extends boolean = false>(options: Options<ContentTypesPut_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ContentTypesPut_Response, ContentTypesPut_Error, ThrowOnError>({
        responseTransformer: contentTypesPutResponseTransformer,
        url: '/contenttypes/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List display templates
 * List display templates using the provided options.
 */
export const displayTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<DisplayTemplatesList_Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DisplayTemplatesList_Response, DisplayTemplatesList_Error, ThrowOnError>({
        responseTransformer: displayTemplatesListResponseTransformer,
        url: '/displaytemplates',
        ...options
    });
};

/**
 * Create display template
 * Create a new display template.
 */
export const displayTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesCreate_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DisplayTemplatesCreate_Response, DisplayTemplatesCreate_Error, ThrowOnError>({
        responseTransformer: displayTemplatesCreateResponseTransformer,
        url: '/displaytemplates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete display template
 * Deletes the display template with the provided key.
 */
export const displayTemplatesDelete = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesDelete_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DisplayTemplatesDelete_Response, DisplayTemplatesDelete_Error, ThrowOnError>({
        responseTransformer: displayTemplatesDeleteResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options
    });
};

/**
 * Get display template
 * Get the display template with the provided key.
 */
export const displayTemplatesGet = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesGet_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DisplayTemplatesGet_Response, DisplayTemplatesGet_Error, ThrowOnError>({
        responseTransformer: displayTemplatesGetResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options
    });
};

/**
 * Update display template
 * Update an existing display template.
 */
export const displayTemplatesPatch = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesPatch_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<DisplayTemplatesPatch_Response, DisplayTemplatesPatch_Error, ThrowOnError>({
        responseTransformer: displayTemplatesPatchResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Create or replace a display template
 * Create or replace a display template. If a display template with the provided key exist it is replaced.
 * Otherwise a new display template is created.
 */
export const displayTemplatesPut = <ThrowOnError extends boolean = false>(options: Options<DisplayTemplatesPut_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<DisplayTemplatesPut_Response, DisplayTemplatesPut_Error, ThrowOnError>({
        responseTransformer: displayTemplatesPutResponseTransformer,
        url: '/displaytemplates/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Request access token
 * Request an access token. This endpoint only supports the 'client_credentials' grant type
 * and will only issue short-lived tokens.
 */
export const oauthToken = <ThrowOnError extends boolean = false>(options: Options<OauthToken_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthToken_Response, OauthToken_Error, ThrowOnError>({
        url: '/oauth/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List property formats
 * List all property formats using the provided options.
 */
export const propertyFormatsList = <ThrowOnError extends boolean = false>(options?: Options<PropertyFormatsList_Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PropertyFormatsList_Response, PropertyFormatsList_Error, ThrowOnError>({
        url: '/propertyformats',
        ...options
    });
};

/**
 * Get property format
 * Get the property format with the provided key.
 */
export const propertyFormatsGet = <ThrowOnError extends boolean = false>(options: Options<PropertyFormatsGet_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PropertyFormatsGet_Response, PropertyFormatsGet_Error, ThrowOnError>({
        url: '/propertyformats/{key}',
        ...options
    });
};

/**
 * List property groups
 * List property groups using the provided options.
 */
export const propertyGroupsList = <ThrowOnError extends boolean = false>(options?: Options<PropertyGroupsList_Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PropertyGroupsList_Response, PropertyGroupsList_Error, ThrowOnError>({
        url: '/propertygroups',
        ...options
    });
};

/**
 * Create property group
 * Create a new property group.
 */
export const propertyGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsCreate_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PropertyGroupsCreate_Response, PropertyGroupsCreate_Error, ThrowOnError>({
        url: '/propertygroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete property group
 * Deletes the property group with the provided key.
 */
export const propertyGroupsDelete = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsDelete_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PropertyGroupsDelete_Response, PropertyGroupsDelete_Error, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options
    });
};

/**
 * Get property group
 * Get the property group with the provided key.
 */
export const propertyGroupsGet = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsGet_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PropertyGroupsGet_Response, PropertyGroupsGet_Error, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options
    });
};

/**
 * Update property group
 * Update an existing property group.
 */
export const propertyGroupsPatch = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsPatch_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PropertyGroupsPatch_Response, PropertyGroupsPatch_Error, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Create or replace property group
 * Create or replace a property group. If a property group with the provided key exist it is replaced.
 * Otherwise a new property group is created.
 */
export const propertyGroupsPut = <ThrowOnError extends boolean = false>(options: Options<PropertyGroupsPut_Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PropertyGroupsPut_Response, PropertyGroupsPut_Error, ThrowOnError>({
        url: '/propertygroups/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};