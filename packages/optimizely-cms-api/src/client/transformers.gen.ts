// This file is auto-generated by @hey-api/openapi-ts

import type { ChangesetsListResponse, ChangesetsCreateResponse, ChangesetsDeleteResponse, ChangesetsGetResponse, ChangesetsPutResponse, ContentCreateResponse, ContentDeleteResponse, ContentGetMetadataResponse, ContentPatchMetadataResponse, ContentGetPathResponse, ContentListItemsResponse, ContentListAssetsResponse, ContentCopyResponse, ContentUndeleteResponse, ContentListAllVersionsResponse, ContentDeleteLocaleResponse, ContentListVersionsResponse, ContentCreateVersionResponse, ContentDeleteVersionResponse, ContentGetVersionResponse, ContentPatchVersionResponse, ContentTypesListResponse, ContentTypesCreateResponse, ContentTypesDeleteResponse, ContentTypesGetResponse, ContentTypesPatchResponse, ContentTypesPutResponse, DisplayTemplatesListResponse, DisplayTemplatesCreateResponse, DisplayTemplatesDeleteResponse, DisplayTemplatesGetResponse, DisplayTemplatesPatchResponse, DisplayTemplatesPutResponse } from './types.gen';

const changesetSchemaResponseTransformer = (data: any) => {
    if (data.created) {
        data.created = new Date(data.created);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const changesetPageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return changesetSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const changesetsListResponseTransformer = async (data: any): Promise<ChangesetsListResponse> => {
    data = changesetPageSchemaResponseTransformer(data);
    return data;
};

export const changesetsCreateResponseTransformer = async (data: any): Promise<ChangesetsCreateResponse> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

export const changesetsDeleteResponseTransformer = async (data: any): Promise<ChangesetsDeleteResponse> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

export const changesetsGetResponseTransformer = async (data: any): Promise<ChangesetsGetResponse> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

export const changesetsPutResponseTransformer = async (data: any): Promise<ChangesetsPutResponse> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

const contentTypeSchemaResponseTransformer = (data: any) => {
    if (data.created) {
        data.created = new Date(data.created);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const contentItemSchemaResponseTransformer = (data: any) => {
    if (data.published) {
        data.published = new Date(data.published);
    }
    if (data.expired) {
        data.expired = new Date(data.expired);
    }
    if (data.delayPublishUntil) {
        data.delayPublishUntil = new Date(data.delayPublishUntil);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const contentItemWithContentTypesSchemaResponseTransformer = (data: any) => {
    if (data.contentTypes) {
        data.contentTypes = data.contentTypes.map((item: any) => {
            return contentTypeSchemaResponseTransformer(item);
        });
    }
    if (data.item) {
        data.item = contentItemSchemaResponseTransformer(data.item);
    }
    return data;
};

export const contentCreateResponseTransformer = async (data: any): Promise<ContentCreateResponse> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

const contentMetadataSchemaResponseTransformer = (data: any) => {
    if (data.deleted) {
        data.deleted = new Date(data.deleted);
    }
    return data;
};

export const contentDeleteResponseTransformer = async (data: any): Promise<ContentDeleteResponse> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

export const contentGetMetadataResponseTransformer = async (data: any): Promise<ContentGetMetadataResponse> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

export const contentPatchMetadataResponseTransformer = async (data: any): Promise<ContentPatchMetadataResponse> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

const contentMetadataPageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return contentMetadataSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const contentGetPathResponseTransformer = async (data: any): Promise<ContentGetPathResponse> => {
    data = contentMetadataPageSchemaResponseTransformer(data);
    return data;
};

export const contentListItemsResponseTransformer = async (data: any): Promise<ContentListItemsResponse> => {
    data = contentMetadataPageSchemaResponseTransformer(data);
    return data;
};

export const contentListAssetsResponseTransformer = async (data: any): Promise<ContentListAssetsResponse> => {
    data = contentMetadataPageSchemaResponseTransformer(data);
    return data;
};

export const contentCopyResponseTransformer = async (data: any): Promise<ContentCopyResponse> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

export const contentUndeleteResponseTransformer = async (data: any): Promise<ContentUndeleteResponse> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

const contentItemListWithContentTypesSchemaResponseTransformer = (data: any) => {
    if (data.contentTypes) {
        data.contentTypes = data.contentTypes.map((item: any) => {
            return contentTypeSchemaResponseTransformer(item);
        });
    }
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return contentItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const contentListAllVersionsResponseTransformer = async (data: any): Promise<ContentListAllVersionsResponse> => {
    data = contentItemListWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentDeleteLocaleResponseTransformer = async (data: any): Promise<ContentDeleteLocaleResponse> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentListVersionsResponseTransformer = async (data: any): Promise<ContentListVersionsResponse> => {
    data = contentItemListWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentCreateVersionResponseTransformer = async (data: any): Promise<ContentCreateVersionResponse> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentDeleteVersionResponseTransformer = async (data: any): Promise<ContentDeleteVersionResponse> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentGetVersionResponseTransformer = async (data: any): Promise<ContentGetVersionResponse> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentPatchVersionResponseTransformer = async (data: any): Promise<ContentPatchVersionResponse> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

const contentTypePageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return contentTypeSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const contentTypesListResponseTransformer = async (data: any): Promise<ContentTypesListResponse> => {
    data = contentTypePageSchemaResponseTransformer(data);
    return data;
};

export const contentTypesCreateResponseTransformer = async (data: any): Promise<ContentTypesCreateResponse> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesDeleteResponseTransformer = async (data: any): Promise<ContentTypesDeleteResponse> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesGetResponseTransformer = async (data: any): Promise<ContentTypesGetResponse> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesPatchResponseTransformer = async (data: any): Promise<ContentTypesPatchResponse> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesPutResponseTransformer = async (data: any): Promise<ContentTypesPutResponse> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

const displayTemplateSchemaResponseTransformer = (data: any) => {
    if (data.created) {
        data.created = new Date(data.created);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const displayTemplatePageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return displayTemplateSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const displayTemplatesListResponseTransformer = async (data: any): Promise<DisplayTemplatesListResponse> => {
    data = displayTemplatePageSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesCreateResponseTransformer = async (data: any): Promise<DisplayTemplatesCreateResponse> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesDeleteResponseTransformer = async (data: any): Promise<DisplayTemplatesDeleteResponse> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesGetResponseTransformer = async (data: any): Promise<DisplayTemplatesGetResponse> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesPatchResponseTransformer = async (data: any): Promise<DisplayTemplatesPatchResponse> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesPutResponseTransformer = async (data: any): Promise<DisplayTemplatesPutResponse> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};