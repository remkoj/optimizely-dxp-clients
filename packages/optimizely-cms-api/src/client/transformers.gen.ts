// This file is auto-generated by @hey-api/openapi-ts

import type { ChangesetsList_Response, ChangesetsCreate_Response, ChangesetsDelete_Response, ChangesetsGet_Response, ChangesetsPut_Response, ContentCreate_Response, ContentDelete_Response, ContentGetMetadata_Response, ContentPatchMetadata_Response, ContentGetPath_Response, ContentListItems_Response, ContentListAssets_Response, ContentCopy_Response, ContentUndelete_Response, ContentListAllVersions_Response, ContentDeleteLocale_Response, ContentListVersions_Response, ContentCreateVersion_Response, ContentDeleteVersion_Response, ContentGetVersion_Response, ContentPatchVersion_Response, ContentTypesList_Response, ContentTypesCreate_Response, ContentTypesDelete_Response, ContentTypesGet_Response, ContentTypesPatch_Response, ContentTypesPut_Response, DisplayTemplatesList_Response, DisplayTemplatesCreate_Response, DisplayTemplatesDelete_Response, DisplayTemplatesGet_Response, DisplayTemplatesPatch_Response, DisplayTemplatesPut_Response } from './types.gen';

const changesetSchemaResponseTransformer = (data: any) => {
    if (data.created) {
        data.created = new Date(data.created);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const changesetPageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return changesetSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const changesetsListResponseTransformer = async (data: any): Promise<ChangesetsList_Response> => {
    data = changesetPageSchemaResponseTransformer(data);
    return data;
};

export const changesetsCreateResponseTransformer = async (data: any): Promise<ChangesetsCreate_Response> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

export const changesetsDeleteResponseTransformer = async (data: any): Promise<ChangesetsDelete_Response> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

export const changesetsGetResponseTransformer = async (data: any): Promise<ChangesetsGet_Response> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

export const changesetsPutResponseTransformer = async (data: any): Promise<ChangesetsPut_Response> => {
    data = changesetSchemaResponseTransformer(data);
    return data;
};

const contentTypeSchemaResponseTransformer = (data: any) => {
    if (data.created) {
        data.created = new Date(data.created);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const contentItemSchemaResponseTransformer = (data: any) => {
    if (data.published) {
        data.published = new Date(data.published);
    }
    if (data.expired) {
        data.expired = new Date(data.expired);
    }
    if (data.delayPublishUntil) {
        data.delayPublishUntil = new Date(data.delayPublishUntil);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const contentItemWithContentTypesSchemaResponseTransformer = (data: any) => {
    if (data.contentTypes) {
        data.contentTypes = data.contentTypes.map((item: any) => {
            return contentTypeSchemaResponseTransformer(item);
        });
    }
    if (data.item) {
        data.item = contentItemSchemaResponseTransformer(data.item);
    }
    return data;
};

export const contentCreateResponseTransformer = async (data: any): Promise<ContentCreate_Response> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

const contentMetadataSchemaResponseTransformer = (data: any) => {
    if (data.deleted) {
        data.deleted = new Date(data.deleted);
    }
    return data;
};

export const contentDeleteResponseTransformer = async (data: any): Promise<ContentDelete_Response> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

export const contentGetMetadataResponseTransformer = async (data: any): Promise<ContentGetMetadata_Response> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

export const contentPatchMetadataResponseTransformer = async (data: any): Promise<ContentPatchMetadata_Response> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

const contentMetadataPageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return contentMetadataSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const contentGetPathResponseTransformer = async (data: any): Promise<ContentGetPath_Response> => {
    data = contentMetadataPageSchemaResponseTransformer(data);
    return data;
};

export const contentListItemsResponseTransformer = async (data: any): Promise<ContentListItems_Response> => {
    data = contentMetadataPageSchemaResponseTransformer(data);
    return data;
};

export const contentListAssetsResponseTransformer = async (data: any): Promise<ContentListAssets_Response> => {
    data = contentMetadataPageSchemaResponseTransformer(data);
    return data;
};

export const contentCopyResponseTransformer = async (data: any): Promise<ContentCopy_Response> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

export const contentUndeleteResponseTransformer = async (data: any): Promise<ContentUndelete_Response> => {
    data = contentMetadataSchemaResponseTransformer(data);
    return data;
};

const contentItemListWithContentTypesSchemaResponseTransformer = (data: any) => {
    if (data.contentTypes) {
        data.contentTypes = data.contentTypes.map((item: any) => {
            return contentTypeSchemaResponseTransformer(item);
        });
    }
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return contentItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const contentListAllVersionsResponseTransformer = async (data: any): Promise<ContentListAllVersions_Response> => {
    data = contentItemListWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentDeleteLocaleResponseTransformer = async (data: any): Promise<ContentDeleteLocale_Response> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentListVersionsResponseTransformer = async (data: any): Promise<ContentListVersions_Response> => {
    data = contentItemListWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentCreateVersionResponseTransformer = async (data: any): Promise<ContentCreateVersion_Response> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentDeleteVersionResponseTransformer = async (data: any): Promise<ContentDeleteVersion_Response> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentGetVersionResponseTransformer = async (data: any): Promise<ContentGetVersion_Response> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

export const contentPatchVersionResponseTransformer = async (data: any): Promise<ContentPatchVersion_Response> => {
    data = contentItemWithContentTypesSchemaResponseTransformer(data);
    return data;
};

const contentTypePageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return contentTypeSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const contentTypesListResponseTransformer = async (data: any): Promise<ContentTypesList_Response> => {
    data = contentTypePageSchemaResponseTransformer(data);
    return data;
};

export const contentTypesCreateResponseTransformer = async (data: any): Promise<ContentTypesCreate_Response> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesDeleteResponseTransformer = async (data: any): Promise<ContentTypesDelete_Response> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesGetResponseTransformer = async (data: any): Promise<ContentTypesGet_Response> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesPatchResponseTransformer = async (data: any): Promise<ContentTypesPatch_Response> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

export const contentTypesPutResponseTransformer = async (data: any): Promise<ContentTypesPut_Response> => {
    data = contentTypeSchemaResponseTransformer(data);
    return data;
};

const displayTemplateSchemaResponseTransformer = (data: any) => {
    if (data.created) {
        data.created = new Date(data.created);
    }
    if (data.lastModified) {
        data.lastModified = new Date(data.lastModified);
    }
    return data;
};

const displayTemplatePageSchemaResponseTransformer = (data: any) => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            return displayTemplateSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const displayTemplatesListResponseTransformer = async (data: any): Promise<DisplayTemplatesList_Response> => {
    data = displayTemplatePageSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesCreateResponseTransformer = async (data: any): Promise<DisplayTemplatesCreate_Response> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesDeleteResponseTransformer = async (data: any): Promise<DisplayTemplatesDelete_Response> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesGetResponseTransformer = async (data: any): Promise<DisplayTemplatesGet_Response> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesPatchResponseTransformer = async (data: any): Promise<DisplayTemplatesPatch_Response> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};

export const displayTemplatesPutResponseTransformer = async (data: any): Promise<DisplayTemplatesPut_Response> => {
    data = displayTemplateSchemaResponseTransformer(data);
    return data;
};